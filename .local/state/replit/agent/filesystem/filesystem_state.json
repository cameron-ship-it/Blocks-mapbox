{"file_contents":{"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"design_guidelines.md":{"content":"# Design Guidelines: Blocks NYC Apartment Search\n\n## Design Approach: Refined Fintech Aesthetic\n\n**Selected Approach:** Fintech-inspired sophistication with real estate listing platform polish  \n**Rationale:** Real estate search tools need trust, clarity, and professionalism. Drawing from platforms like Stripe, Plaid, Zillow, and Redfin - we balance sophisticated fintech design with accessible, clear functionality. The map remains the hero, but with enhanced visual refinement.\n\n**Core Principles:**\n- **Trust through refinement**: Sophisticated color palette and subtle depth\n- **Professional yet approachable**: Clean design that doesn't feel sterile\n- **Clarity first**: Every element serves the user's search goal\n- **Progressive disclosure**: Show complexity only when needed\n- **Map-first design**: The interactive blocks map is the destination, wizard steps are preparation\n\n---\n\n## Core Design Elements\n\n### A. Color Palette\n\n**Light Mode (Primary):**\n- **Primary**: 239 84% 67% (#6366F1 - Sophisticated indigo, inspired by modern fintech)\n- **Surface**: 0 0% 100% (Pure white for cards and popovers)\n- **Background**: 210 40% 98% (#F8FAFC - Subtle off-white for reduced eye strain)\n- **Border**: 220 13% 91% (Refined neutral borders)\n- **Text Primary**: 222 47% 11% (#0F172A - Deep slate for excellent readability)\n- **Text Secondary**: 215 16% 47% (#64748B - Muted slate for supporting text)\n- **Success**: 160 84% 39% (#10B981 - Refined emerald for selected blocks)\n- **Destructive**: 0 84% 60% (#F43F5E - Modern rose)\n- **Accent Light**: 226 100% 97% (#EEF2FF - Very light indigo for subtle highlights)\n\n**Dark Mode:**\n- **Primary**: 239 84% 67% (#6366F1 - Same indigo works beautifully in dark)\n- **Surface**: 222 47% 15% (#1E293B - Rich slate)\n- **Background**: 222 47% 11% (#0F172A - Deep navy background)\n- **Border**: 215 25% 20% (Subtle dark borders)\n- **Text Primary**: 210 40% 98% (#F8FAFC - Off-white)\n- **Text Secondary**: 215 16% 47% (#64748B - Balanced gray)\n\n### B. Typography\n\n**Font Stack:** Inter (Google Fonts) - industry standard for fintech and modern web apps\n- **Headings**: 600-700 weight, tight tracking (-0.02em)\n- **Body**: 400 weight, relaxed line-height (1.6)\n- **Labels**: 500-600 weight, subtle letter-spacing\n- **Monospace**: UI Monospace for data/numbers when needed\n\n**Scale:**\n- **Small labels**: text-xs (11-12px)\n- **Body/Form**: text-base (16px)\n- **Section heads**: text-lg font-semibold (18px)\n- **Page titles**: text-2xl font-bold (24px)\n- **Large displays**: text-3xl+ for emphasis (rare)\n\n### C. Layout System\n\n**Spacing Philosophy:** Generous white space, clear visual hierarchy\n\n**Spacing Units:** \n- Base: 4px increments (p-1, p-2, p-4, p-6, p-8, p-12, p-16)\n- Cards: p-6 (standard), p-8 (hero cards)\n- Sections: space-y-6 to space-y-8\n- Form fields: space-y-4\n- Component gaps: gap-3 to gap-4\n\n**Border Radius:**\n- Cards: rounded-lg (12px) - more refined than oversized radii\n- Buttons/Inputs: rounded-md (12px)\n- Small elements: rounded-md (12px)\n- Consistent, professional feel\n\n**Container Strategy:**\n- Wizard: max-w-2xl centered\n- Map page: Full viewport with optional sidebar\n- Mobile: px-4, Desktop: px-6 to px-8\n\n### D. Component Library\n\n**Wizard Flow:**\n- **Step indicator**: Refined horizontal progress with subtle connecting lines\n- **Budget slider**: Dual-thumb range with clean value display, smooth interactions\n- **Borough/Neighborhood cards**: Subtle shadows, clear selected states with indigo accent\n- **Navigation**: Clean button hierarchy with proper spacing\n\n**Map Interface:**\n- **Desktop sidebar**: Clean panel with refined borders and backgrounds\n- **Map controls**: Minimal, well-positioned controls\n- **Block interaction**: Smooth color transitions, clear selected state\n- **Mobile**: Thoughtful responsive design with bottom sheets\n\n**Forms & Inputs:**\n- **Text inputs**: Clean borders, focused ring states in indigo\n- **Buttons**: \n  - Primary: Indigo with white text\n  - Secondary: Subtle gray background\n  - Ghost: Text-only for tertiary actions\n  - Outline: Border-based for flexibility\n- **Consistent sizing**: Proper min-height for all interactive elements\n\n**Data Display:**\n- **Cards**: Subtle shadows (shadow-card), clean backgrounds\n- **Lists**: Clear dividers, adequate spacing\n- **Badges**: Refined sizing and colors\n- **Counters**: Clean, minimal presentation\n\n### E. Shadows & Depth\n\n**Philosophy:** Subtle, refined depth - not heavy drop shadows\n\n- **Cards**: Very subtle shadow (shadow-card) - just enough for separation\n- **Popovers**: Slightly more pronounced (shadow-popover)\n- **Hover states**: Minimal shadow increase\n- **Focus states**: Indigo ring, not shadow-based\n\n### F. Interactions & Animations\n\n**Micro-interactions:**\n- **Hover**: Subtle elevation change via background overlay\n- **Active**: Slightly more pronounced elevation\n- **Transitions**: Fast (150-200ms) and smooth\n- **Focus**: Clear ring states in brand color\n\n**Philosophy:** Responsive and smooth, never slow or distracting\n\n---\n\n## Specific Improvements Over Previous Design\n\n1. **Color Sophistication**: Moved from bright blue (#3D8BFF) to refined indigo (#6366F1)\n2. **Better Neutrals**: Warmer, more sophisticated slate tones vs. stark grays\n3. **Subtle Backgrounds**: Off-white (#F8FAFC) instead of pure white for reduced eye strain\n4. **Refined Shadows**: More subtle, layered approach\n5. **Tighter Radii**: 12px instead of 24px for cards - more professional\n6. **Better Text Hierarchy**: Clearer primary/secondary text distinction\n7. **Consistent Elevation**: Better use of subtle background overlays\n\n---\n\n## Accessibility & Quality\n\n- **Focus states**: Clear indigo ring with proper offset\n- **Keyboard navigation**: Full support through all interactive elements\n- **ARIA labels**: Comprehensive coverage for map and dynamic elements\n- **Color contrast**: WCAG AA minimum, AAA where possible\n- **Touch targets**: Minimum 44x44px for all interactive elements\n- **Responsive**: Mobile-first approach with thoughtful breakpoints\n\n---\n\n## Design References\n\nThis design draws inspiration from:\n- **Stripe**: Sophisticated indigo palette, clean layouts\n- **Plaid**: Professional fintech aesthetic, clear hierarchy\n- **Zillow/Redfin**: Real estate listing professionalism\n- **Linear**: Modern UI patterns, refined interactions\n- **Vercel**: Clean, minimal approach with clear focus\n\nThe result is a design that feels trustworthy, professional, and modern - perfect for a NYC apartment search tool.\n","size_bytes":6481},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=DM+Sans:wght@400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE - Refined Fintech Design System */\n:root {\n  --button-outline: rgba(0,0,0, .12);\n  --badge-outline: rgba(0,0,0, .08);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  /* Refined Fintech Color Palette */\n  --slate-950: 222 47% 11%; /* #0F172A - Deep navy for text */\n  --slate-900: 222 47% 15%; /* #1E293B */\n  --slate-800: 215 25% 27%; /* #334155 */\n  --slate-700: 215 16% 47%; /* #64748B - Secondary text */\n  --slate-100: 214 32% 91%; /* #E2E8F0 */\n  --slate-50: 210 40% 98%; /* #F8FAFC - Subtle background */\n  \n  --indigo-600: 239 84% 67%; /* #6366F1 - Primary brand color */\n  --indigo-700: 243 75% 59%; /* #4F46E5 - Hover state */\n  --indigo-50: 226 100% 97%; /* #EEF2FF - Light accent */\n  \n  --emerald-600: 160 84% 39%; /* #10B981 - Success */\n  --rose-600: 0 84% 60%; /* #F43F5E - Destructive */\n  --amber-500: 38 92% 50%; /* #F59E0B - Warning */\n  \n  --neutral-50: 0 0% 98%; /* #FAFAFA */\n  --neutral-100: 0 0% 96%; /* #F5F5F5 */\n  --neutral-200: 0 0% 90%; /* #E5E5E5 */\n  --neutral-300: 0 0% 83%; /* #D4D4D4 */\n  --neutral-border: 220 13% 91%; /* Refined border */\n\n  /* Semantic mappings */\n  --background: var(--slate-50);\n  --foreground: var(--slate-950);\n  --border: var(--neutral-border);\n\n  --card: 0 0% 100%;\n  --card-foreground: var(--slate-950);\n  --card-border: var(--neutral-200);\n\n  --sidebar: var(--neutral-50);\n  --sidebar-foreground: var(--slate-950);\n  --sidebar-border: var(--neutral-200);\n  --sidebar-primary: var(--slate-950);\n  --sidebar-primary-foreground: 0 0% 100%;\n  --sidebar-accent: var(--neutral-100);\n  --sidebar-accent-foreground: var(--slate-950);\n  --sidebar-ring: var(--indigo-600);\n\n  --popover: 0 0% 100%;\n  --popover-foreground: var(--slate-950);\n  --popover-border: var(--neutral-200);\n\n  --primary: var(--indigo-600);\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: var(--neutral-100);\n  --secondary-foreground: var(--slate-950);\n\n  --muted: var(--neutral-100);\n  --muted-foreground: var(--slate-700);\n\n  --accent: var(--indigo-50);\n  --accent-foreground: var(--indigo-700);\n\n  --destructive: var(--rose-600);\n  --destructive-foreground: 0 0% 100%;\n\n  --input: var(--neutral-200);\n  --ring: var(--indigo-600);\n\n  --chart-1: 239 84% 67%;\n  --chart-2: 160 84% 39%;\n  --chart-3: 38 92% 50%;\n  --chart-4: 0 84% 60%;\n  --chart-5: 215 16% 47%;\n\n  /* Typography */\n  --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n  --font-display: 'DM Sans', -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n  --font-serif: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n  --font-mono: ui-monospace, SFMono-Regular, 'SF Mono', Menlo, Consolas, 'Liberation Mono', monospace;\n\n  /* Spacing and Layout */\n  --radius: 0.75rem; /* 12px - slightly tighter */\n  --radius-card: 1rem; /* 16px - more refined than 24px */\n  --spacing: 0.25rem;\n\n  /* Shadows - refined and subtle */\n  --shadow-card: 0px 1px 3px 0px rgba(0, 0, 0, 0.04), 0px 1px 2px 0px rgba(0, 0, 0, 0.03);\n  --shadow-popover: 0px 4px 16px 0px rgba(0, 0, 0, 0.06), 0px 2px 4px 0px rgba(0, 0, 0, 0.04);\n  --shadow-2xs: 0px 1px 2px 0px rgba(0, 0, 0, 0.03);\n  --shadow-xs: 0px 1px 3px 0px rgba(0, 0, 0, 0.06);\n  --shadow-sm: 0px 2px 4px -1px rgba(0, 0, 0, 0.04), 0px 1px 2px -1px rgba(0, 0, 0, 0.03);\n  --shadow: 0px 4px 6px -1px rgba(0, 0, 0, 0.06), 0px 2px 4px -1px rgba(0, 0, 0, 0.04);\n  --shadow-md: 0px 6px 12px -2px rgba(0, 0, 0, 0.08), 0px 3px 6px -2px rgba(0, 0, 0, 0.06);\n  --shadow-lg: 0px 10px 20px -4px rgba(0, 0, 0, 0.10), 0px 4px 8px -2px rgba(0, 0, 0, 0.06);\n  --shadow-xl: 0px 20px 30px -6px rgba(0, 0, 0, 0.12), 0px 8px 12px -4px rgba(0, 0, 0, 0.08);\n  --shadow-2xl: 0px 25px 50px -12px rgba(0, 0, 0, 0.15);\n\n  --tracking-normal: -0.02em;\n\n  /* Automatically computed borders */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n/* DARK MODE */\n.dark {\n  --button-outline: rgba(255,255,255, .12);\n  --badge-outline: rgba(255,255,255, .08);\n\n  --opaque-button-border-intensity: 9;\n\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .10);\n\n  /* Dark mode colors - refined */\n  --background: var(--slate-950);\n  --foreground: var(--slate-50);\n  --border: 215 25% 20%;\n\n  --card: var(--slate-900);\n  --card-foreground: var(--slate-50);\n  --card-border: 215 25% 20%;\n\n  --sidebar: 222 47% 8%;\n  --sidebar-foreground: var(--slate-50);\n  --sidebar-border: 215 25% 20%;\n  --sidebar-primary: var(--slate-50);\n  --sidebar-primary-foreground: var(--slate-950);\n  --sidebar-accent: 215 25% 18%;\n  --sidebar-accent-foreground: var(--slate-50);\n  --sidebar-ring: var(--indigo-600);\n\n  --popover: var(--slate-900);\n  --popover-foreground: var(--slate-50);\n  --popover-border: 215 25% 20%;\n\n  --primary: var(--indigo-600);\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 215 25% 20%;\n  --secondary-foreground: var(--slate-50);\n\n  --muted: 215 25% 18%;\n  --muted-foreground: var(--slate-700);\n\n  --accent: var(--indigo-50);\n  --accent-foreground: var(--indigo-700);\n\n  --destructive: var(--rose-600);\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 215 25% 25%;\n  --ring: var(--indigo-600);\n\n  --chart-1: 239 84% 67%;\n  --chart-2: 160 84% 39%;\n  --chart-3: 38 92% 50%;\n  --chart-4: 0 84% 60%;\n  --chart-5: 215 16% 47%;\n\n  --shadow-card: 0px 2px 8px 0px rgba(0, 0, 0, 0.30), 0px 1px 2px 0px rgba(0, 0, 0, 0.20);\n  --shadow-popover: 0px 4px 16px 0px rgba(0, 0, 0, 0.40), 0px 2px 4px 0px rgba(0, 0, 0, 0.30);\n  --shadow-2xs: 0px 1px 2px 0px rgba(0, 0, 0, 0.30);\n  --shadow-xs: 0px 1px 3px 0px rgba(0, 0, 0, 0.35);\n  --shadow-sm: 0px 2px 4px -1px rgba(0, 0, 0, 0.30), 0px 1px 2px -1px rgba(0, 0, 0, 0.25);\n  --shadow: 0px 4px 6px -1px rgba(0, 0, 0, 0.35), 0px 2px 4px -1px rgba(0, 0, 0, 0.30);\n  --shadow-md: 0px 6px 12px -2px rgba(0, 0, 0, 0.40), 0px 3px 6px -2px rgba(0, 0, 0, 0.35);\n  --shadow-lg: 0px 10px 20px -4px rgba(0, 0, 0, 0.45), 0px 4px 8px -2px rgba(0, 0, 0, 0.35);\n  --shadow-xl: 0px 20px 30px -6px rgba(0, 0, 0, 0.50), 0px 8px 12px -4px rgba(0, 0, 0, 0.40);\n  --shadow-2xl: 0px 25px 50px -12px rgba(0, 0, 0, 0.60);\n\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  /* Typography hierarchy - Refined fintech style */\n  h1 {\n    @apply text-[2rem] leading-[2.25rem] font-bold tracking-tight;\n  }\n\n  h2 {\n    @apply text-2xl leading-7 font-bold tracking-tight;\n  }\n\n  h3 {\n    @apply text-xl leading-6 font-semibold tracking-tight;\n  }\n\n  /* Enable tabular nums for better number display */\n  .tabular-nums {\n    font-variant-numeric: tabular-nums;\n  }\n}\n\n@layer utilities {\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  .no-default-hover-elevate {}\n  .no-default-active-elevate {}\n\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: -1;\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: 999;\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n\n  /* Custom shadow utilities */\n  .shadow-card {\n    box-shadow: var(--shadow-card);\n  }\n\n  .shadow-popover {\n    box-shadow: var(--shadow-popover);\n  }\n}\n","size_bytes":11579},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"replit.md":{"content":"# Blocks - NYC Apartment Search\n\n## Overview\n\nBlocks is a modern NYC apartment search application featuring a 4-step wizard flow that guides users through budget selection, borough choice, neighborhood filtering, and an interactive Mapbox-powered map for selecting city blocks. The application emphasizes clean design, accessibility, and mobile responsiveness with a map-first approach where the interactive block selection is the hero feature.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Recent Changes\n\n### Logo Reset Functionality (October 17, 2025)\nAdded complete wizard reset capability when clicking the \"Blocks NYC\" logo:\n- **User Experience**: Clicking the logo resets the entire wizard and returns to the budget step\n- **State Reset**: Clears all selections (budget, boroughs, neighborhoods, map blocks)\n- **Implementation**:\n  - `handleReset()` function in BlocksOnboardingWizard clears all wizard state\n  - Resets budget to defaults ($1500-$4000)\n  - Clears selectionStore and map feature states\n  - Resets selection mode to 'include'\n  - Returns to first step ('budget')\n  - Logo converted from Link to button to avoid React hook issues\n- **Testing**: End-to-end verified - works correctly from any wizard step\n\n### Minimal Fintech Redesign - Final Polish (October 17, 2025)\nPushed the design even further toward minimal perfection by removing all unnecessary visual elements:\n- **Layout Simplification**: \n  - Removed all Card borders and shadows from wizard steps\n  - Removed FormHint helper text and border lines from navigation\n  - Centered all step content with max-width containers (2xl for most steps, 3xl for map)\n- **Input Redesign**: Changed to borderless with subtle bottom border only, cleaner focus states\n- **Progress Indicator**: Simplified to text-based horizontal breadcrumb with \"/\" separators\n  - Current step: bold weight\n  - Completed steps: check icon + muted color\n  - Future steps: lighter muted color\n- **Spacing System**: Increased vertical breathing room (32-40px between major sections)\n  - space-y-12 for main container sections\n  - space-y-10 for step content\n  - gap-6 for grid layouts\n  - pt-10 for navigation separation\n- **Header**: Minimal top bar with wordmark (left), centered stepper (middle), theme toggle (right)\n- **Footer**: Borderless with subtle footer links\n- **Result**: Ultra-clean, centered, breathable interface inspired by Linear and modern fintech products\n- **Functionality**: All block selection, map interactions, and wizard flow fully preserved\n\n### Fintech-Inspired Design Refresh (October 17, 2025)\nUpdated the application's visual design to a more sophisticated fintech aesthetic while preserving all functionality:\n- **Color Palette**: Migrated from bright blue (#3D8BFF) to refined indigo (#6366F1) for primary actions\n- **Background System**: Changed from pure white to subtle off-white (#F8FAFC) for reduced eye strain\n- **Neutral Colors**: Upgraded to warmer, more sophisticated slate tones for better visual hierarchy\n- **Border Radii**: Refined card corners from 24px to 16px for a more professional appearance\n- **Success Color**: Shifted to refined emerald (#10B981) for selected blocks\n- **Typography**: Maintained Inter font family with enhanced hierarchy\n- **Design Inspiration**: Drew from Stripe, Plaid, Zillow, and Redfin for a trustworthy, modern aesthetic\n- **Functionality**: Zero changes to block selection, map interactions, or wizard flow - purely visual refinement\n\n### Block Selection Refactoring (October 2025)\nFixed the map block selection system to ensure clicking one block only selects that specific block:\n- **Issue**: Previously, clicking one block was selecting all blocks on the map\n- **Solution**: Refactored to use Mapbox's feature-state API with proper per-feature isolation\n- **Implementation Details**:\n  - Created `toggleFeature(fid)` function for scoped feature state updates\n  - Created `reapplySelections()` function to restore selections after data reloads\n  - Improved ID extraction with fallback logic (feature.id → block_id → GEOID)\n  - Added sourcedata event listener to automatically restore selections during zoom/pan\n  - Fixed TypeScript null check errors in map event handlers\n  - Cleaned up ProgressStepper component code structure\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework & Build System**\n- **React 18** with TypeScript in strict mode for full type safety\n- **Vite** as the build tool and development server with HMR support\n- **Wouter** for client-side routing (lightweight React Router alternative)\n- **File Structure**: Monorepo-style setup with `client/`, `server/`, and `shared/` directories\n\n**UI Component System**\n- **shadcn/ui** components built on Radix UI primitives\n- **Tailwind CSS** for styling with custom design tokens\n- **Design Philosophy**: Fintech-inspired sophistication with real estate listing platform polish\n- **Component Approach**: Utility-first, map-focused design with refined visual hierarchy\n- **Color System**: Deep indigo primary (#6366F1), sophisticated slate neutrals, subtle off-white backgrounds\n- **Accessibility**: Full keyboard navigation and ARIA compliance through Radix UI primitives\n\n**State Management & Data Fetching**\n- **TanStack Query (React Query)** for server state management\n- **React Hook Form** with Zod resolvers for form validation\n- Local state with React hooks for wizard flow management\n\n**Map Integration**\n- **Mapbox GL JS** (vanilla, not React wrapper) for interactive mapping\n- Custom vector tiles layer for NYC city blocks with clickable polygons\n- Configurable map styles and data sources via environment variables\n- Progressive disclosure pattern: wizard steps prepare users before reaching the map\n- **Block Selection System**: Feature-state based per-block selection using Mapbox's `setFeatureState()` API\n  - Unique feature IDs promoted via `promoteId: \"block_id\"` on vector source\n  - Robust ID extraction with fallbacks: `feature.id`, `block_id`, `GEOID`\n  - `toggleFeature()` function for independent block selection/deselection\n  - `reapplySelections()` function to restore selections after zoom/pan/data reloads\n  - Selections persist through tile updates via sourcedata event listener\n\n### Backend Architecture\n\n**Server Framework**\n- **Express.js** with TypeScript for the API server\n- **Development Mode**: Vite middleware integration for SSR and HMR\n- **Production Mode**: Pre-built static assets served from `dist/public`\n\n**API Design**\n- RESTful API pattern with `/api` prefix for all endpoints\n- Centralized error handling middleware\n- Request/response logging in development mode\n\n**Database Layer**\n- **Drizzle ORM** configured for PostgreSQL via `@neondatabase/serverless`\n- Schema-first approach with TypeScript types generated from Drizzle schemas\n- Database migrations managed through `drizzle-kit`\n- Session storage using `connect-pg-simple` for PostgreSQL-backed sessions\n\n**Storage Interface Pattern**\n- Abstract `IStorage` interface for CRUD operations\n- Current implementation: `MemStorage` (in-memory, development)\n- Designed to be swapped with database-backed implementation\n- Supports user management operations (create, read by ID/username)\n\n### Design System\n\n**Color Palette**\n- Light mode primary: Professional blue (220° 90% 56%) for trust and clarity\n- Success/Selected state: NYC parks green (142° 71% 45%)\n- Sophisticated neutral grays with subtle borders (220° 13% 91%)\n- Dark mode support with adjusted lightness values\n\n**Typography**\n- **Font Family**: Inter (Google Fonts) for professional readability\n- **Hierarchy**: Text-xs for labels → text-base for body → text-2xl for titles\n- **Weights**: 400 (body), 500 (labels), 600 (headings)\n\n**Interactive States**\n- Hover effects with `--elevate-1` (3% opacity overlay)\n- Active/pressed effects with `--elevate-2` (8% opacity overlay)\n- Custom CSS properties for consistent elevation across components\n\n## External Dependencies\n\n### Third-Party Services\n\n**Mapbox**\n- **Service**: Mapbox GL JS for interactive maps\n- **Authentication**: Access token via `VITE_MAPBOX_TOKEN` environment variable\n- **Free Tier**: 50,000 map loads per month\n- **Configuration Options**:\n  - `VITE_MAP_STYLE`: Mapbox style URL (default: light-v11)\n  - `VITE_BLOCKS_TILES`: Optional custom vector tiles URL\n  - `VITE_BLOCKS_SOURCE`: Source name for blocks layer\n  - `VITE_BLOCKS_LAYER`: Fill layer name for blocks\n  - `VITE_BLOCKS_SOURCE_LAYER`: Source layer in tileset\n\n### Database & Hosting\n\n**Neon PostgreSQL** (via `@neondatabase/serverless`)\n- Serverless PostgreSQL database\n- Connection via `DATABASE_URL` environment variable\n- Required for production deployment\n\n**Replit Platform Integration**\n- `@replit/vite-plugin-runtime-error-modal` for development error handling\n- `@replit/vite-plugin-cartographer` for code mapping (development only)\n- `@replit/vite-plugin-dev-banner` for development UI indicators\n\n### UI Libraries & Tools\n\n**Core UI Dependencies**\n- **Radix UI**: Comprehensive primitive components for accessibility\n- **Lucide React**: Icon library for consistent iconography\n- **class-variance-authority**: Type-safe component variants\n- **tailwind-merge** & **clsx**: Utility for conditional className merging\n\n**Form & Validation**\n- **React Hook Form**: Performance-focused form management\n- **Zod**: Schema validation with TypeScript inference\n- **@hookform/resolvers**: Integration between RHF and Zod\n\n**Specialized Components**\n- **cmdk**: Command palette/menu component\n- **date-fns**: Date manipulation utilities\n- **vaul**: Drawer component for mobile interactions\n- **embla-carousel-react**: Carousel functionality\n- **recharts**: Data visualization (chart components)\n\n### Development Tools\n\n**Type Safety & Validation**\n- TypeScript 5.x with strict mode enabled\n- Drizzle-Zod for database schema validation\n- Path aliases: `@/` for client, `@shared/` for shared code, `@assets/` for assets\n\n**Build & Development**\n- esbuild for server bundling in production\n- PostCSS with Tailwind and Autoprefixer\n- Source map support via `@jridgewell/trace-mapping`","size_bytes":10120},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    container: {\n      center: true,\n      padding: \"1.25rem\",\n      screens: {\n        \"2xl\": \"960px\",\n      },\n    },\n    extend: {\n      borderRadius: {\n        lg: \"1rem\", /* 16px */\n        md: \"0.75rem\", /* 12px */\n        sm: \"0.375rem\", /* 6px */\n        card: \"1rem\", /* 16px - refined for fintech aesthetic */\n      },\n      colors: {\n        // Flat / base colors\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n        // Blocks NYC specific colors\n        ink: \"hsl(var(--ink) / <alpha-value>)\",\n        \"ink-2\": \"hsl(var(--ink-2) / <alpha-value>)\",\n        charcoal: \"hsl(var(--charcoal) / <alpha-value>)\",\n        \"gray-1\": \"hsl(var(--gray-1) / <alpha-value>)\",\n        \"gray-2\": \"hsl(var(--gray-2) / <alpha-value>)\",\n        \"gray-3\": \"hsl(var(--gray-3) / <alpha-value>)\",\n        \"accent-blue\": \"hsl(var(--accent-blue) / <alpha-value>)\",\n        \"accent-red\": \"hsl(var(--accent-red) / <alpha-value>)\",\n        success: \"hsl(var(--success) / <alpha-value>)\",\n        warning: \"hsl(var(--warning) / <alpha-value>)\",\n        \"text-primary\": \"hsl(var(--text-primary) / <alpha-value>)\",\n        \"text-secondary\": \"hsl(var(--text-secondary) / <alpha-value>)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        display: [\"var(--font-display)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      fontSize: {\n        'h1': ['2rem', { lineHeight: '2.25rem', fontWeight: '700' }],\n        'h2': ['1.5rem', { lineHeight: '1.75rem', fontWeight: '700' }],\n        'h3': ['1.25rem', { lineHeight: '1.5rem', fontWeight: '600' }],\n        'body': ['1rem', { lineHeight: '1.5rem', fontWeight: '400' }],\n        'label': ['0.875rem', { lineHeight: '1.25rem', fontWeight: '500' }],\n      },\n      boxShadow: {\n        'card': 'var(--shadow-card)',\n        'popover': 'var(--shadow-popover)',\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n        \"fade-in\": {\n          from: { opacity: \"0\", transform: \"translateY(8px)\" },\n          to: { opacity: \"1\", transform: \"translateY(0)\" },\n        },\n        \"fade-out\": {\n          from: { opacity: \"1\", transform: \"translateY(0)\" },\n          to: { opacity: \"0\", transform: \"translateY(8px)\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fade-in 0.2s ease-out\",\n        \"fade-out\": \"fade-out 0.2s ease-out\",\n      },\n      transitionDuration: {\n        DEFAULT: '180ms',\n      },\n      transitionTimingFunction: {\n        DEFAULT: 'cubic-bezier(0.4, 0, 0.2, 1)',\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":6062},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Mapbox configuration endpoint\n  app.get(\"/api/mapbox-config\", (_req, res) => {\n    const config = {\n      token: process.env.MAPBOX_TOKEN || \"\",\n      tilesUrl: process.env.MAPBOX_TILES_URL || \"\",\n      sourceLayer: process.env.MAPBOX_SOURCE_LAYER || \"\"\n    };\n    res.json(config);\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":557},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/lib/geo.ts":{"content":"export interface Neighborhood {\n  id: string;\n  name: string;\n  boroughId: string;\n}\n\nexport interface Borough {\n  id: string;\n  name: string;\n  neighborhoods: Neighborhood[];\n}\n\nexport const boroughs: Borough[] = [\n  {\n    id: 'manhattan',\n    name: 'Manhattan',\n    neighborhoods: [\n      { id: 'upper-west-side', name: 'Upper West Side', boroughId: 'manhattan' },\n      { id: 'upper-east-side', name: 'Upper East Side', boroughId: 'manhattan' },\n      { id: 'midtown', name: 'Midtown', boroughId: 'manhattan' },\n      { id: 'chelsea', name: 'Chelsea', boroughId: 'manhattan' },\n      { id: 'greenwich-village', name: 'Greenwich Village', boroughId: 'manhattan' },\n      { id: 'soho', name: 'SoHo', boroughId: 'manhattan' },\n      { id: 'lower-east-side', name: 'Lower East Side', boroughId: 'manhattan' },\n      { id: 'financial-district', name: 'Financial District', boroughId: 'manhattan' },\n    ],\n  },\n  {\n    id: 'brooklyn',\n    name: 'Brooklyn',\n    neighborhoods: [\n      { id: 'williamsburg', name: 'Williamsburg', boroughId: 'brooklyn' },\n      { id: 'park-slope', name: 'Park Slope', boroughId: 'brooklyn' },\n      { id: 'dumbo', name: 'DUMBO', boroughId: 'brooklyn' },\n      { id: 'bushwick', name: 'Bushwick', boroughId: 'brooklyn' },\n      { id: 'bedford-stuyvesant', name: 'Bedford-Stuyvesant', boroughId: 'brooklyn' },\n      { id: 'greenpoint', name: 'Greenpoint', boroughId: 'brooklyn' },\n    ],\n  },\n  {\n    id: 'queens',\n    name: 'Queens',\n    neighborhoods: [\n      { id: 'astoria', name: 'Astoria', boroughId: 'queens' },\n      { id: 'long-island-city', name: 'Long Island City', boroughId: 'queens' },\n      { id: 'flushing', name: 'Flushing', boroughId: 'queens' },\n      { id: 'jackson-heights', name: 'Jackson Heights', boroughId: 'queens' },\n      { id: 'forest-hills', name: 'Forest Hills', boroughId: 'queens' },\n    ],\n  },\n  {\n    id: 'bronx',\n    name: 'Bronx',\n    neighborhoods: [\n      { id: 'riverdale', name: 'Riverdale', boroughId: 'bronx' },\n      { id: 'fordham', name: 'Fordham', boroughId: 'bronx' },\n      { id: 'hunts-point', name: 'Hunts Point', boroughId: 'bronx' },\n      { id: 'mott-haven', name: 'Mott Haven', boroughId: 'bronx' },\n    ],\n  },\n  {\n    id: 'staten-island',\n    name: 'Staten Island',\n    neighborhoods: [\n      { id: 'st-george', name: 'St. George', boroughId: 'staten-island' },\n      { id: 'new-brighton', name: 'New Brighton', boroughId: 'staten-island' },\n      { id: 'tottenville', name: 'Tottenville', boroughId: 'staten-island' },\n      { id: 'great-kills', name: 'Great Kills', boroughId: 'staten-island' },\n    ],\n  },\n];\n\nexport function getBoroughById(id: string): Borough | undefined {\n  return boroughs.find((b) => b.id === id);\n}\n\nexport function getNeighborhoodById(id: string): Neighborhood | undefined {\n  for (const borough of boroughs) {\n    const neighborhood = borough.neighborhoods.find((n) => n.id === id);\n    if (neighborhood) return neighborhood;\n  }\n  return undefined;\n}\n\nexport function getNeighborhoodsByBorough(boroughId: string): Neighborhood[] {\n  const borough = getBoroughById(boroughId);\n  return borough?.neighborhoods || [];\n}\n","size_bytes":3132},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":993},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-none border-0 border-b border-border bg-transparent px-0 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:border-b-2 focus-visible:border-primary disabled:cursor-not-allowed disabled:opacity-50 md:text-sm transition-colors\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":858},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"README.md":{"content":"# Blocks - NYC Apartment Search\n\nA modern, professional NYC apartment search application with a 4-step wizard and interactive Mapbox-powered block selection.\n\n## Features\n\n- **4-Step Wizard Flow**: Budget range → Borough selection → Neighborhood multi-select → Interactive map\n- **Mapbox GL JS Integration**: Custom blocks vector layer with clickable city block polygons\n- **Clean UI**: Minimal, professional design with Tailwind CSS\n- **TypeScript**: Full type safety with strict mode\n- **Mobile Responsive**: Works seamlessly on all devices\n- **Keyboard Accessible**: Full keyboard navigation support\n\n## Setup Instructions\n\n### 1. Install Dependencies\n\nDependencies are already installed. If needed, run:\n\n```bash\nnpm install\n```\n\n### 2. Configure Mapbox Token\n\nThe app requires a Mapbox access token to display the interactive map.\n\n#### Getting Your Token:\n1. Go to [https://account.mapbox.com/access-tokens/](https://account.mapbox.com/access-tokens/)\n2. Sign up for a free account (free tier: 50,000 map loads/month)\n3. Create a new access token or copy your default public token\n\n#### Adding the Token:\nAdd your token as a secret using the Replit Secrets tool, or set it as an environment variable:\n\n**Secret Name:** `VITE_MAPBOX_TOKEN`  \n**Value:** Your Mapbox token (e.g., `pk.eyJ1...`)\n\n### 3. Configure Map Layers (Optional)\n\nAdditional environment variables for custom map configuration:\n\n- `VITE_MAP_STYLE`: Mapbox style URL (default: `mapbox://styles/mapbox/light-v11`)\n- `VITE_BLOCKS_TILES`: Custom blocks vector tiles URL (optional)\n- `VITE_BLOCKS_SOURCE`: Blocks source layer name (default: `blocks`)\n- `VITE_BLOCKS_LAYER`: Blocks fill layer name (default: `blocks-fill`)\n- `VITE_BLOCKS_SOURCE_LAYER`: Source layer in tileset (default: `blocks-fill`)\n\n#### Two Configuration Scenarios:\n\n**Scenario A: Blocks layer already in your Mapbox style**\n- Set `VITE_MAP_STYLE` to your custom style URL\n- Leave `VITE_BLOCKS_TILES` empty\n- The app will use layers from your style\n\n**Scenario B: Separate blocks vector tiles**\n- Set `VITE_BLOCKS_TILES` to your tiles URL template\n- Configure `VITE_BLOCKS_SOURCE` and `VITE_BLOCKS_LAYER` names\n- The app will add the tiles as a separate source\n\n### 4. Run Development Server\n\n```bash\nnpm run dev\n```\n\nThe app will be available at the URL shown in the console (typically port 5000).\n\n## Customizing the Wizard Component\n\nThe main wizard component is a **placeholder stub** ready for your custom implementation.\n\n**File Location:** `/client/src/components/BlocksOnboardingWizard.tsx`\n\nTo add your custom wizard implementation:\n1. Open the file `/client/src/components/BlocksOnboardingWizard.tsx`\n2. Replace the placeholder component with your custom code\n3. The dev server will automatically reload with your changes\n\n### Available Data:\n\nNYC borough and neighborhood data is available in `/client/src/lib/geo.ts`:\n\n```typescript\nimport { boroughs, getBoroughById, getNeighborhoodsByBorough } from '@/lib/geo';\n\n// boroughs contains: Manhattan, Brooklyn, Queens, Bronx, Staten Island\n// Each with their respective neighborhoods\n```\n\n### Mapbox Integration:\n\nYour custom component can access Mapbox via:\n\n```typescript\nimport mapboxgl from 'mapbox-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\n// Access token from environment\nconst token = import.meta.env.VITE_MAPBOX_TOKEN;\n```\n\n## Project Structure\n\n```\nclient/\n├── src/\n│   ├── components/\n│   │   └── BlocksOnboardingWizard.tsx    # ← Replace this with your wizard\n│   ├── lib/\n│   │   └── geo.ts                        # NYC borough/neighborhood data\n│   └── App.tsx                           # Main app with routing\nserver/\n└── routes.ts                             # API routes (if needed)\n```\n\n## Tech Stack\n\n- **Frontend**: React + Vite + TypeScript\n- **Routing**: Wouter\n- **Styling**: Tailwind CSS\n- **Maps**: Mapbox GL JS\n- **Backend**: Express (Node.js)\n\n## Next Steps\n\n1. ✅ Add your Mapbox token as a secret\n2. ✅ Run `npm run dev`\n3. ✅ Replace the placeholder component in `/client/src/components/BlocksOnboardingWizard.tsx`\n4. ✅ Build your 4-step wizard with Mapbox integration\n\nHappy coding! 🗽\n","size_bytes":4187},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":584},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/BlocksOnboardingWizard.tsx":{"content":"import { useState, useEffect, useRef, useMemo } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { RangeSlider } from \"@/components/ui/range-slider\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { EmptyState } from \"@/components/ui/empty-state\";\nimport { AppShell } from \"@/components/layout/AppShell\";\nimport { useStep, type WizardStep } from \"@/hooks/useStep\";\nimport { boroughs } from \"@/lib/geo\";\nimport { \n  fetchManhattanNeighborhoods, \n  processNeighborhoods, \n  getSortedNeighborhoods,\n  computeCombinedBbox,\n  type NeighborhoodData,\n  type NeighborhoodsGeoJSON\n} from \"@/lib/neighborhoods\";\nimport { SelectionStore } from \"@/lib/selectionStore\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { \n  ChevronRight, \n  ChevronLeft, \n  Building2, \n  Map as MapIcon, \n  Search, \n  X, \n  MapPin,\n  CheckCircle2,\n  DollarSign,\n  RotateCcw,\n  Layers,\n  Check\n} from \"lucide-react\";\nimport mapboxgl from \"mapbox-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { motion } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\nimport * as turf from \"@turf/turf\";\nimport { useLocation } from \"wouter\";\n\n// Mapbox layer constants\nconst LAYER_SOURCE = \"blocks\";\nconst LAYER_ID = \"blocks-fill\";\nconst LAYER_LINE_ID = \"blocks-outline\";\n\ninterface MapboxConfig {\n  token: string;\n  tilesUrl: string;\n  sourceLayer: string;\n}\n\ninterface WizardState {\n  budgetMin: number;\n  budgetMax: number;\n  selectedBoroughs: string[];\n  selectedNeighborhoods: string[];\n  selectedBlocks: Set<string>;\n}\n\n// Steps configuration for the stepper\nconst WIZARD_STEPS = [\n  { id: 'budget', label: 'Budget' },\n  { id: 'borough', label: 'Borough' },\n  { id: 'neighborhood', label: 'Neighborhood' },\n  { id: 'map', label: 'Blocks' },\n  { id: 'review', label: 'Review' },\n];\n\nexport default function BlocksOnboardingWizard() {\n  const { currentStep, next, back, goTo, isFirstStep, isLastStep } = useStep('budget');\n  const [, setLocation] = useLocation();\n  \n  // Initial state for reset\n  const initialWizardState: WizardState = {\n    budgetMin: 1500,\n    budgetMax: 4000,\n    selectedBoroughs: [],\n    selectedNeighborhoods: [],\n    selectedBlocks: new Set<string>(),\n  };\n  \n  const [wizardState, setWizardState] = useState<WizardState>(initialWizardState);\n\n  // Neighborhood search\n  const [neighborhoodSearch, setNeighborhoodSearch] = useState(\"\");\n\n  const mapContainer = useRef<HTMLDivElement>(null);\n  const map = useRef<mapboxgl.Map | null>(null);\n  const [mapError, setMapError] = useState<string | null>(null);\n  const selectedBlockIds = useRef<Set<string>>(new Set());\n  \n  // Initialize SelectionStore\n  const selectionStore = useRef<SelectionStore>(new SelectionStore());\n  const [selectionMode, setSelectionMode] = useState<'include' | 'exclude'>(selectionStore.current.getMode());\n  const [, forceUpdate] = useState({});\n\n  // Get Mapbox token directly from environment variable\n  const mapboxToken = import.meta.env.VITE_MAPBOX_TOKEN;\n  const mapboxConfig = {\n    token: mapboxToken || \"\",\n    tilesUrl: import.meta.env.VITE_MAPBOX_TILES_URL || \"\",\n    sourceLayer: import.meta.env.VITE_MAPBOX_SOURCE_LAYER || \"\"\n  };\n  \n  // Debug logging\n  useEffect(() => {\n    console.log('Mapbox Config:', {\n      hasToken: !!mapboxConfig.token,\n      tokenPrefix: mapboxConfig.token?.substring(0, 10),\n      tilesUrl: mapboxConfig.tilesUrl,\n      sourceLayer: mapboxConfig.sourceLayer\n    });\n  }, [mapboxConfig.token, mapboxConfig.tilesUrl, mapboxConfig.sourceLayer]);\n\n  // Load NYC DCP Neighborhood Tabulation Areas for Manhattan\n  const { data: manhattanNeighborhoods, isLoading: isLoadingNeighborhoods } = useQuery<NeighborhoodsGeoJSON>({\n    queryKey: ['manhattan-neighborhoods'],\n    queryFn: fetchManhattanNeighborhoods,\n    staleTime: Infinity, // Data is static, cache indefinitely\n  });\n\n  // Process neighborhoods data\n  const neighborhoodMap = useMemo(() => {\n    if (!manhattanNeighborhoods) return new Map<string, NeighborhoodData>();\n    return processNeighborhoods(manhattanNeighborhoods);\n  }, [manhattanNeighborhoods]);\n\n  const sortedNeighborhoods = useMemo(() => {\n    return getSortedNeighborhoods(neighborhoodMap);\n  }, [neighborhoodMap]);\n\n  // Filter neighborhoods by search\n  const filteredManhattanNeighborhoods = useMemo(() => {\n    if (!neighborhoodSearch) return sortedNeighborhoods;\n    return sortedNeighborhoods.filter((n) =>\n      n.name.toLowerCase().includes(neighborhoodSearch.toLowerCase())\n    );\n  }, [sortedNeighborhoods, neighborhoodSearch]);\n\n  // Keep old borough-based logic for backwards compatibility\n  const availableNeighborhoods = boroughs\n    .filter((b) => wizardState.selectedBoroughs.includes(b.id))\n    .flatMap((b) => b.neighborhoods);\n\n  // Filter neighborhoods by search (old logic)\n  const filteredNeighborhoods = neighborhoodSearch\n    ? availableNeighborhoods.filter((n) =>\n        n.name.toLowerCase().includes(neighborhoodSearch.toLowerCase())\n      )\n    : availableNeighborhoods;\n\n  // Toggle borough selection\n  const toggleBorough = (boroughId: string) => {\n    setWizardState((prev) => {\n      const isSelected = prev.selectedBoroughs.includes(boroughId);\n      const newBoroughs = isSelected\n        ? prev.selectedBoroughs.filter((id) => id !== boroughId)\n        : [...prev.selectedBoroughs, boroughId];\n\n      // Remove neighborhoods from deselected boroughs\n      const newNeighborhoods = isSelected\n        ? prev.selectedNeighborhoods.filter(\n            (nId) => !boroughs.find((b) => b.id === boroughId)?.neighborhoods.some((n) => n.id === nId)\n          )\n        : prev.selectedNeighborhoods;\n\n      return { ...prev, selectedBoroughs: newBoroughs, selectedNeighborhoods: newNeighborhoods };\n    });\n  };\n\n  // Subscribe to SelectionStore changes\n  useEffect(() => {\n    const unsubscribe = selectionStore.current.subscribe(() => {\n      forceUpdate({});\n      setWizardState((prev) => ({\n        ...prev,\n        selectedBlocks: selectionStore.current.getSelected()\n      }));\n    });\n    return unsubscribe;\n  }, []);\n\n  // Toggle neighborhood selection\n  const toggleNeighborhood = (neighborhoodId: string) => {\n    setWizardState((prev) => ({\n      ...prev,\n      selectedNeighborhoods: prev.selectedNeighborhoods.includes(neighborhoodId)\n        ? prev.selectedNeighborhoods.filter((id) => id !== neighborhoodId)\n        : [...prev.selectedNeighborhoods, neighborhoodId],\n    }));\n  };\n\n  // Reset entire wizard to initial state\n  const handleReset = () => {\n    // Reset wizard state to initial values\n    setWizardState(initialWizardState);\n    \n    // Clear neighborhood search\n    setNeighborhoodSearch(\"\");\n    \n    // Clear selection store\n    selectionStore.current.clearAll();\n    \n    // Clear selected block IDs ref\n    selectedBlockIds.current.clear();\n    \n    // Reset selection mode to include\n    selectionStore.current.setMode('include');\n    setSelectionMode('include');\n    \n    // Clear all feature states on the map\n    if (map.current) {\n      const features = map.current.querySourceFeatures(LAYER_SOURCE, {\n        sourceLayer: mapboxConfig.sourceLayer\n      });\n      \n      features.forEach(feature => {\n        const blockId = feature.id ?? feature.properties?.block_id ?? feature.properties?.GEOID;\n        if (blockId) {\n          const fid = !isNaN(Number(blockId)) ? Number(blockId) : blockId;\n          map.current?.setFeatureState(\n            { source: LAYER_SOURCE, sourceLayer: mapboxConfig.sourceLayer, id: fid },\n            { selected: false }\n          );\n        }\n      });\n    }\n    \n    // Return to first step\n    goTo('budget');\n  };\n\n  // Focus map on selected neighborhoods (Manhattan neighborhoods from API)\n  useEffect(() => {\n    if (!map.current || wizardState.selectedNeighborhoods.length === 0) return;\n\n    const bbox = computeCombinedBbox(wizardState.selectedNeighborhoods, neighborhoodMap);\n    if (bbox) {\n      map.current.fitBounds(bbox as [number, number, number, number], {\n        padding: 48,\n        animate: true,\n        duration: 800\n      });\n    }\n  }, [wizardState.selectedNeighborhoods, neighborhoodMap]);\n\n  // Spatial filtering: Auto-select blocks within selected neighborhoods\n  useEffect(() => {\n    if (!map.current || !manhattanNeighborhoods || wizardState.selectedNeighborhoods.length === 0) return;\n    if (currentStep !== 'map') return; // Only filter when on map step\n\n    const selectedNeighborhoodGeometries = wizardState.selectedNeighborhoods\n      .map(id => neighborhoodMap.get(id))\n      .filter((n): n is NeighborhoodData => n !== undefined)\n      .map(n => n.geometry);\n\n    if (selectedNeighborhoodGeometries.length === 0) return;\n\n    // Use Mapbox querySourceFeatures to get all block features\n    // Note: This requires the source to be loaded\n    try {\n      const features = map.current.querySourceFeatures(LAYER_SOURCE, {\n        sourceLayer: mapboxConfig.sourceLayer\n      });\n\n      if (features.length === 0) {\n        console.log('No block features found yet, source may not be loaded');\n        return;\n      }\n\n      console.log(`Spatial filtering: checking ${features.length} blocks against ${selectedNeighborhoodGeometries.length} neighborhoods`);\n\n      // Use Turf to check if each block intersects with any selected neighborhood\n      const blocksToSelect: string[] = [];\n      \n      features.forEach(feature => {\n        const blockId = feature.id ?? feature.properties?.block_id ?? feature.properties?.GEOID;\n        if (!blockId) return;\n\n        // Check if this block intersects with any selected neighborhood\n        const intersects = selectedNeighborhoodGeometries.some(neighborhood => {\n          try {\n            // Use Turf booleanIntersects to check spatial relationship\n            return turf.booleanIntersects(feature.geometry as any, neighborhood as any);\n          } catch (e) {\n            // If geometry is invalid or comparison fails, skip\n            return false;\n          }\n        });\n\n        if (intersects) {\n          blocksToSelect.push(String(blockId));\n        }\n      });\n\n      console.log(`Spatial filtering: found ${blocksToSelect.length} blocks within selected neighborhoods`);\n\n      // Add these blocks to selection\n      blocksToSelect.forEach(blockId => {\n        selectionStore.current.add(blockId);\n        \n        // Update feature-state\n        if (map.current) {\n          const fid = !isNaN(Number(blockId)) ? Number(blockId) : blockId;\n          map.current.setFeatureState(\n            { source: LAYER_SOURCE, sourceLayer: mapboxConfig.sourceLayer, id: fid },\n            { selected: true }\n          );\n        }\n      });\n\n      // Update selectedBlockIds ref for backward compatibility\n      blocksToSelect.forEach(id => selectedBlockIds.current.add(id));\n\n    } catch (error) {\n      console.error('Spatial filtering error:', error);\n    }\n  }, [wizardState.selectedNeighborhoods, currentStep, manhattanNeighborhoods, neighborhoodMap]);\n\n  // Clear all neighborhoods\n  const clearAllNeighborhoods = () => {\n    setWizardState((prev) => ({ ...prev, selectedNeighborhoods: [] }));\n  };\n\n  // Mode control handlers\n  const handleSelectAll = () => {\n    // TODO: Select all blocks visible in the current map view\n    // This would require querying all features in the current bounds\n    console.log('Select All not yet implemented - would select all visible blocks');\n  };\n\n  const handleInvert = () => {\n    if (!map.current) {\n      console.warn('Map not initialized, cannot invert selection');\n      return;\n    }\n\n    try {\n      // Query all block features from the map source\n      const features = map.current.querySourceFeatures(LAYER_SOURCE, {\n        sourceLayer: mapboxConfig.sourceLayer\n      });\n\n      if (features.length === 0) {\n        console.warn('No block features found, source may not be loaded');\n        return;\n      }\n\n      // Extract all block IDs\n      const allBlockIds = features\n        .map(f => {\n          const id = f.id ?? f.properties?.block_id ?? f.properties?.GEOID;\n          return id ? String(id) : null;\n        })\n        .filter((id): id is string => id !== null);\n\n      console.log(`Inverting selection with ${allBlockIds.length} total blocks`);\n\n      // Get current selection before inverting\n      const previousSelection = selectionStore.current.getSelected();\n\n      // Invert selection in store\n      selectionStore.current.invert(allBlockIds);\n\n      // Update feature-state on map\n      const newSelection = selectionStore.current.getSelected();\n\n      // Clear previously selected blocks\n      previousSelection.forEach(blockId => {\n        if (!newSelection.has(blockId)) {\n          const fid = !isNaN(Number(blockId)) ? Number(blockId) : blockId;\n          map.current?.setFeatureState(\n            { source: LAYER_SOURCE, sourceLayer: mapboxConfig.sourceLayer, id: fid },\n            { selected: false }\n          );\n        }\n      });\n\n      // Set newly selected blocks\n      newSelection.forEach(blockId => {\n        if (!previousSelection.has(blockId)) {\n          const fid = !isNaN(Number(blockId)) ? Number(blockId) : blockId;\n          map.current?.setFeatureState(\n            { source: LAYER_SOURCE, sourceLayer: mapboxConfig.sourceLayer, id: fid },\n            { selected: true }\n          );\n        }\n      });\n\n      // Update selectedBlockIds ref\n      selectedBlockIds.current = new Set(newSelection);\n\n    } catch (error) {\n      console.error('Error inverting selection:', error);\n    }\n  };\n\n  const handleClearAll = () => {\n    if (!map.current) {\n      selectionStore.current.clearAll();\n      return;\n    }\n\n    // Get current selection before clearing\n    const previousSelection = selectionStore.current.getSelected();\n\n    // Clear selection in store\n    selectionStore.current.clearAll();\n\n    // Clear feature-state on map for all previously selected blocks\n    previousSelection.forEach(blockId => {\n      const fid = !isNaN(Number(blockId)) ? Number(blockId) : blockId;\n      map.current?.setFeatureState(\n        { source: LAYER_SOURCE, sourceLayer: mapboxConfig.sourceLayer, id: fid },\n        { selected: false }\n      );\n    });\n\n    // Clear selectedBlockIds ref\n    selectedBlockIds.current.clear();\n  };\n\n  const handleModeChange = (mode: 'include' | 'exclude') => {\n    selectionStore.current.setMode(mode);\n    setSelectionMode(mode);\n  };\n\n  // Initialize Mapbox map\n  useEffect(() => {\n    console.log('Map initialization useEffect triggered:', {\n      currentStep,\n      hasContainer: !!mapContainer.current,\n      hasToken: !!mapboxConfig.token,\n      hasMap: !!map.current\n    });\n    \n    if (currentStep === \"map\" && mapboxConfig.token && !map.current) {\n      // Use requestAnimationFrame to ensure the ref is attached after render\n      const initMap = () => {\n        if (!mapContainer.current) {\n          console.log('Container not ready, retrying...');\n          requestAnimationFrame(initMap);\n          return;\n        }\n\n        console.log('Initializing Mapbox map...');\n        \n        if (!mapboxgl.supported()) {\n          console.error('WebGL not supported');\n          setMapError('WebGL not supported. Please open in a new browser tab with hardware acceleration enabled.');\n          return;\n        }\n\n        try {\n          mapboxgl.accessToken = mapboxConfig.token;\n          setMapError(null);\n          console.log('Mapbox accessToken set, creating map instance...');\n\n          map.current = new mapboxgl.Map({\n            container: mapContainer.current,\n            style: \"mapbox://styles/mapbox/light-v11\",\n            center: [-73.935242, 40.730610],\n            zoom: 11,\n          });\n\n          console.log('Map instance created successfully');\n\n          map.current.on('error', (e) => {\n            console.error('Mapbox error:', e);\n            console.error('Error details:', {\n              error: e.error,\n              message: e.error?.message,\n              status: (e.error as any)?.status\n            });\n            \n            if ((e.error as any)?.status === 401) {\n              setMapError('Invalid Mapbox token. Please check your VITE_MAPBOX_TOKEN.');\n            } else if (e.error?.message?.includes('style')) {\n              setMapError('Map style failed to load. Please check your internet connection.');\n            } else {\n              setMapError('Map failed to load. Please refresh the page.');\n            }\n          });\n          \n          map.current.on('load', () => {\n            console.log('=== MAP LOAD EVENT FIRED ===');\n            console.log('Map loaded successfully');\n            console.log('Map style loaded:', map.current?.getStyle()?.name);\n            \n            // Define source layer outside the conditional so it's accessible to click handlers\n            const LAYER_SOURCE_LAYER = mapboxConfig.sourceLayer || \"blocks\";\n            \n            // Add custom tiles layer\n            if (mapboxConfig.tilesUrl && map.current) {\n              console.log('Adding custom tiles source:', {\n                tilesUrl: mapboxConfig.tilesUrl,\n                sourceLayer: mapboxConfig.sourceLayer\n              });\n              \n              // Determine the best ID property for promoteId\n              // Priority: block_id > GEOID > let Mapbox use its internal ID\n              const sourceConfig: any = {\n                type: \"vector\",\n                // We'll try block_id first, but the tileset might use GEOID or have a string ID field\n                // Mapbox will use the tileset's native ID if promoteId property doesn't exist\n                promoteId: \"block_id\"\n              };\n              \n              if (mapboxConfig.tilesUrl.startsWith(\"mapbox://\")) {\n                sourceConfig.url = mapboxConfig.tilesUrl;\n                console.log('Using Mapbox tileset URL:', sourceConfig.url);\n              } else {\n                sourceConfig.tiles = [mapboxConfig.tilesUrl];\n                console.log('Using custom tiles URL:', sourceConfig.tiles);\n              }\n              \n              try {\n                map.current.addSource(LAYER_SOURCE, sourceConfig);\n                console.log('✓ Source added successfully with promoteId:', sourceConfig.promoteId);\n\n                // Fill layer with Blocks NYC accent color\n                map.current.addLayer({\n                  id: LAYER_ID,\n                  type: \"fill\",\n                  source: LAYER_SOURCE,\n                  \"source-layer\": LAYER_SOURCE_LAYER,\n                  paint: {\n                    \"fill-color\": [\n                      \"case\",\n                      [\"boolean\", [\"feature-state\", \"selected\"], false],\n                      \"hsl(214, 100%, 62%)\", // accent-blue when selected\n                      \"hsl(0, 0%, 93%)\" // gray-2 when not selected\n                    ],\n                    \"fill-opacity\": [\n                      \"case\",\n                      [\"boolean\", [\"feature-state\", \"selected\"], false],\n                      0.3,\n                      0.6\n                    ],\n                  },\n                });\n                console.log('✓ Fill layer added successfully');\n\n                // Outline layer\n                map.current.addLayer({\n                  id: LAYER_LINE_ID,\n                  type: \"line\",\n                  source: LAYER_SOURCE,\n                  \"source-layer\": LAYER_SOURCE_LAYER,\n                  paint: {\n                    \"line-color\": [\n                      \"case\",\n                      [\"boolean\", [\"feature-state\", \"selected\"], false],\n                      \"hsl(214, 100%, 62%)\", // accent-blue when selected\n                      \"hsl(0, 0%, 86%)\" // gray-3 when not selected\n                    ],\n                    \"line-width\": [\n                      \"case\",\n                      [\"boolean\", [\"feature-state\", \"selected\"], false],\n                      2,\n                      0.8\n                    ],\n                  },\n                });\n                console.log('✓ Outline layer added successfully');\n                console.log('=== LAYERS CONFIGURED ===');\n                \n                // Listen for source data events\n                map.current.on('sourcedata', (e) => {\n                  if (e.sourceId === LAYER_SOURCE && e.isSourceLoaded) {\n                    console.log('[QA] ✓ Blocks source data loaded');\n                    \n                    // Query a sample feature to see its structure\n                    const features = map.current?.querySourceFeatures(LAYER_SOURCE, {\n                      sourceLayer: LAYER_SOURCE_LAYER\n                    });\n                    \n                    if (features && features.length > 0) {\n                      const sample = features[0];\n                      console.log('[QA] Sample feature from tileset:', {\n                        'feature.id': sample.id,\n                        'has_block_id': sample.properties?.block_id !== undefined,\n                        'has_GEOID': sample.properties?.GEOID !== undefined,\n                        'properties': sample.properties,\n                        'totalFeatures': features.length\n                      });\n                      \n                      // Verify promoteId is working\n                      if (sample.id === undefined) {\n                        console.error('[QA] WARNING: feature.id is undefined! promoteId may not be working correctly.');\n                        console.error('[QA] Check if the tileset has the property specified in promoteId:', sourceConfig.promoteId);\n                      } else {\n                        console.log('[QA] ✓ feature.id is set correctly:', sample.id);\n                      }\n                    } else {\n                      console.warn('[QA] No features found in tileset!');\n                    }\n                  }\n                });\n                \n                // Check if tiles are loading\n                map.current.on('data', (e) => {\n                  if (e.sourceId === LAYER_SOURCE) {\n                    console.log('[QA] Data event for blocks source:', e.dataType);\n                  }\n                });\n              } catch (error) {\n                console.error('✗ Error adding source or layers:', error);\n                setMapError('Failed to load block tiles. Please check your tileset configuration.');\n              }\n            } else {\n              console.log('No tiles URL configured, skipping custom layer');\n            }\n            \n            // Maintain Set of selected IDs (source of truth)\n            const selectedIds = new Set<string>();\n            \n            const toggleFeature = (fid: string | number) => {\n              const fidString = String(fid);\n              const wasSelected = selectedIds.has(fidString);\n              \n              // Toggle in Set\n              if (wasSelected) {\n                selectedIds.delete(fidString);\n              } else {\n                selectedIds.add(fidString);\n              }\n              \n              // Update feature-state for ONLY this feature\n              if (map.current) {\n                const featureId = !isNaN(Number(fid)) ? Number(fid) : fid;\n                map.current.setFeatureState(\n                  { source: LAYER_SOURCE, sourceLayer: LAYER_SOURCE_LAYER, id: featureId },\n                  { selected: !wasSelected }\n                );\n              }\n              \n              // Update SelectionStore\n              selectionStore.current.setSelected(fidString, !wasSelected);\n              \n              // Update backward compatibility ref\n              if (wasSelected) {\n                selectedBlockIds.current.delete(fidString);\n              } else {\n                selectedBlockIds.current.add(fidString);\n              }\n              \n              // QA check: Log selected count and verify isolation\n              console.log(`[QA] Toggled feature ${fidString}: ${wasSelected ? 'OFF' : 'ON'}`);\n              console.log(`[QA] Total selected count: ${selectedIds.size}`);\n            };\n\n            const reapplySelections = () => {\n              if (!map.current) return;\n              \n              console.log(`[QA] Reapplying ${selectedIds.size} selections`);\n              \n              // Clear all feature states first to ensure clean slate\n              const allFeatures = map.current.querySourceFeatures(LAYER_SOURCE, {\n                sourceLayer: LAYER_SOURCE_LAYER\n              });\n              \n              allFeatures.forEach(feature => {\n                if (feature.id !== undefined && map.current) {\n                  map.current.setFeatureState(\n                    { source: LAYER_SOURCE, sourceLayer: LAYER_SOURCE_LAYER, id: feature.id },\n                    { selected: false }\n                  );\n                }\n              });\n              \n              // Reapply selections from Set\n              selectedIds.forEach(fidString => {\n                if (map.current) {\n                  const fid = !isNaN(Number(fidString)) ? Number(fidString) : fidString;\n                  map.current.setFeatureState(\n                    { source: LAYER_SOURCE, sourceLayer: LAYER_SOURCE_LAYER, id: fid },\n                    { selected: true }\n                  );\n                }\n              });\n            };\n            \n            // Helper: Select all blocks\n            const selectAllBlocks = (ids: string[]) => {\n              if (!map.current) return;\n              console.log(`[QA] Selecting all ${ids.length} blocks`);\n              \n              // Clear current selection\n              selectedIds.clear();\n              \n              // Add all in chunks for smooth UI\n              const CHUNK_SIZE = 100;\n              for (let i = 0; i < ids.length; i += CHUNK_SIZE) {\n                const chunk = ids.slice(i, i + CHUNK_SIZE);\n                chunk.forEach(id => {\n                  selectedIds.add(id);\n                  const fid = !isNaN(Number(id)) ? Number(id) : id;\n                  if (map.current) {\n                    map.current.setFeatureState(\n                      { source: LAYER_SOURCE, sourceLayer: LAYER_SOURCE_LAYER, id: fid },\n                      { selected: true }\n                    );\n                  }\n                });\n              }\n              \n              // Sync with stores\n              selectionStore.current.selectAll(ids);\n              ids.forEach(id => selectedBlockIds.current.add(id));\n              \n              console.log(`[QA] Selected ${selectedIds.size} blocks`);\n            };\n            \n            // Helper: Clear all selections\n            const clearAllBlocks = () => {\n              if (!map.current) return;\n              console.log(`[QA] Clearing all ${selectedIds.size} selections`);\n              \n              selectedIds.forEach(fidString => {\n                const fid = !isNaN(Number(fidString)) ? Number(fidString) : fidString;\n                if (map.current) {\n                  map.current.setFeatureState(\n                    { source: LAYER_SOURCE, sourceLayer: LAYER_SOURCE_LAYER, id: fid },\n                    { selected: false }\n                  );\n                }\n              });\n              \n              selectedIds.clear();\n              selectionStore.current.clearAll();\n              selectedBlockIds.current.clear();\n              \n              console.log(`[QA] All selections cleared`);\n            };\n            \n            // Helper: Invert selection\n            const invertSelection = (allIds: string[]) => {\n              if (!map.current) return;\n              console.log(`[QA] Inverting selection from ${selectedIds.size} blocks`);\n              \n              const newSelection = new Set<string>();\n              \n              // Determine which blocks to toggle\n              allIds.forEach(id => {\n                if (!selectedIds.has(id)) {\n                  newSelection.add(id);\n                }\n              });\n              \n              // Clear all current selections\n              selectedIds.forEach(fidString => {\n                const fid = !isNaN(Number(fidString)) ? Number(fidString) : fidString;\n                if (map.current) {\n                  map.current.setFeatureState(\n                    { source: LAYER_SOURCE, sourceLayer: LAYER_SOURCE_LAYER, id: fid },\n                    { selected: false }\n                  );\n                }\n              });\n              \n              // Apply new selections in chunks\n              selectedIds.clear();\n              const CHUNK_SIZE = 100;\n              const newSelectionArray = Array.from(newSelection);\n              \n              for (let i = 0; i < newSelectionArray.length; i += CHUNK_SIZE) {\n                const chunk = newSelectionArray.slice(i, i + CHUNK_SIZE);\n                chunk.forEach(id => {\n                  selectedIds.add(id);\n                  const fid = !isNaN(Number(id)) ? Number(id) : id;\n                  if (map.current) {\n                    map.current.setFeatureState(\n                      { source: LAYER_SOURCE, sourceLayer: LAYER_SOURCE_LAYER, id: fid },\n                      { selected: true }\n                    );\n                  }\n                });\n              }\n              \n              // Sync with stores\n              selectionStore.current.invert(allIds);\n              selectedBlockIds.current.clear();\n              selectedIds.forEach(id => selectedBlockIds.current.add(id));\n              \n              console.log(`[QA] Inverted to ${selectedIds.size} blocks`);\n            };\n\n            if (map.current) {\n              map.current.on(\"click\", LAYER_ID, (e) => {\n                const features = map.current?.queryRenderedFeatures(e.point, { layers: [LAYER_ID] });\n                \n                if (!features || features.length === 0) {\n                  console.log('[QA] No features found at click point');\n                  return;\n                }\n\n                // Extract stable ID from feature\n                const feature = features[0];\n                // Try feature.id first (set by promoteId), then fallback properties\n                const fid = feature.id ?? feature.properties?.block_id ?? feature.properties?.GEOID;\n                \n                console.log('[QA] Click event:', {\n                  featuresAtPoint: features.length,\n                  clickedFeatureId: fid,\n                  hasFeatureId: feature.id !== undefined,\n                  hasBlockId: feature.properties?.block_id !== undefined,\n                  hasGeoId: feature.properties?.GEOID !== undefined,\n                  currentlySelected: selectedIds.has(String(fid))\n                });\n                \n                if (fid === undefined || fid === null || fid === '') {\n                  console.error('[QA] Feature has no valid ID! Cannot set feature state.');\n                  console.error('[QA] Feature properties:', feature.properties);\n                  return;\n                }\n\n                // Toggle ONLY this feature\n                toggleFeature(fid);\n                \n                // QA: Verify no other features changed state\n                if (features.length > 1) {\n                  console.warn(`[QA] Multiple features (${features.length}) at click point - only toggling first`);\n                }\n              });\n\n              map.current.on(\"sourcedata\", (e) => {\n                if (e.sourceId === LAYER_SOURCE && e.isSourceLoaded && selectedIds.size > 0) {\n                  console.log('[QA] Source data loaded, reapplying selections');\n                  reapplySelections();\n                }\n              });\n\n              map.current.on(\"mouseenter\", LAYER_ID, () => {\n                if (map.current) map.current.getCanvas().style.cursor = \"pointer\";\n              });\n\n              map.current.on(\"mouseleave\", LAYER_ID, () => {\n                if (map.current) map.current.getCanvas().style.cursor = \"\";\n              });\n            }\n            \n            // Expose map debug info and helpers to window for troubleshooting\n            if (typeof window !== 'undefined') {\n              (window as any).debugMap = () => {\n                if (!map.current) return 'No map instance';\n                const style = map.current.getStyle();\n                return {\n                  loaded: map.current.loaded(),\n                  style: style?.name,\n                  sources: Object.keys(style?.sources || {}),\n                  layers: style?.layers?.map(l => ({ id: l.id, type: l.type, source: (l as any).source })) || [],\n                  center: map.current.getCenter(),\n                  zoom: map.current.getZoom(),\n                  selectedCount: selectedIds.size,\n                  selectedIds: Array.from(selectedIds)\n                };\n              };\n              \n              // Expose helper functions for manual testing\n              (window as any).mapHelpers = {\n                selectAll: selectAllBlocks,\n                clearAll: clearAllBlocks,\n                invert: invertSelection,\n                getSelectedIds: () => Array.from(selectedIds),\n                getSelectedCount: () => selectedIds.size\n              };\n              \n              console.log('[QA] Debug: Call window.debugMap() to inspect map state');\n              console.log('[QA] Debug: Call window.mapHelpers for selection utilities');\n            }\n          });\n        } catch (error) {\n          console.error('Failed to initialize Mapbox:', error);\n          setMapError('Failed to initialize map.');\n          return;\n        }\n      };\n\n      requestAnimationFrame(initMap);\n    }\n\n    return () => {\n      if (map.current) {\n        map.current.remove();\n        map.current = null;\n      }\n    };\n  }, [currentStep, mapboxConfig.token, mapboxConfig.tilesUrl, mapboxConfig.sourceLayer]);\n\n  // Validation for proceeding\n  const canProceed = () => {\n    switch (currentStep) {\n      case \"budget\":\n        return wizardState.budgetMin < wizardState.budgetMax;\n      case \"borough\":\n        return wizardState.selectedBoroughs.length > 0;\n      case \"neighborhood\":\n        return wizardState.selectedNeighborhoods.length > 0;\n      case \"map\":\n        return true;\n      case \"review\":\n        return true;\n      default:\n        return false;\n    }\n  };\n\n  const handleNext = () => {\n    if (canProceed()) {\n      if (currentStep === \"review\") {\n        setLocation(\"/results\");\n      } else {\n        next();\n      }\n    }\n  };\n\n  const handleRemoveBlock = (blockId: string) => {\n    if (map.current && mapboxConfig) {\n      selectedBlockIds.current.delete(blockId);\n      \n      const fid = !isNaN(Number(blockId)) ? Number(blockId) : blockId;\n      map.current.setFeatureState(\n        { source: LAYER_SOURCE, sourceLayer: mapboxConfig.sourceLayer || \"blocks\", id: fid },\n        { selected: false }\n      );\n      \n      setWizardState((prev) => {\n        const nextBlocks = new Set(prev.selectedBlocks);\n        nextBlocks.delete(blockId);\n        return { ...prev, selectedBlocks: nextBlocks };\n      });\n    }\n  };\n\n  const handleClearAllBlocks = () => {\n    if (map.current && mapboxConfig) {\n      selectedBlockIds.current.forEach((id) => {\n        const fid = !isNaN(Number(id)) ? Number(id) : id;\n        map.current?.setFeatureState(\n          { source: LAYER_SOURCE, sourceLayer: mapboxConfig.sourceLayer || \"blocks\", id: fid },\n          { selected: false }\n        );\n      });\n      \n      selectedBlockIds.current.clear();\n      setWizardState((prev) => ({ ...prev, selectedBlocks: new Set<string>() }));\n    }\n  };\n\n  // Get summary data\n  const selectedBoroughNames = boroughs\n    .filter((b) => wizardState.selectedBoroughs.includes(b.id))\n    .map((b) => b.name);\n\n  const selectedNeighborhoodNames = boroughs\n    .flatMap((b) => b.neighborhoods)\n    .filter((n) => wizardState.selectedNeighborhoods.includes(n.id))\n    .map((n) => n.name);\n\n  return (\n    <AppShell\n      currentStep={currentStep}\n      steps={WIZARD_STEPS}\n      onStepClick={(stepId) => goTo(stepId as WizardStep)}\n      showStepper={currentStep !== \"review\"}\n      onLogoClick={handleReset}\n    >\n      <div className=\"max-w-4xl mx-auto space-y-12\" data-testid=\"wizard-container\">\n        {/* Step Header */}\n        <div className=\"space-y-4\">\n          <h1 className=\"text-3xl font-bold tracking-tight flex items-center gap-3\" data-testid=\"text-step-title\">\n            {currentStep === \"budget\" && \"Set your budget\"}\n            {currentStep === \"borough\" && \"Choose your boroughs\"}\n            {currentStep === \"neighborhood\" && \"Select neighborhoods\"}\n            {currentStep === \"map\" && \"Pick your blocks\"}\n            {currentStep === \"review\" && \"Review your preferences\"}\n          </h1>\n          <p className=\"text-muted-foreground\" data-testid=\"text-step-description\">\n            {currentStep === \"budget\" && \"What is your monthly rent budget?\"}\n            {currentStep === \"borough\" && \"Which NYC boroughs interest you?\"}\n            {currentStep === \"neighborhood\" && \"Select specific neighborhoods to explore\"}\n            {currentStep === \"map\" && \"Click on blocks to add them to your search\"}\n            {currentStep === \"review\" && \"Review and edit your apartment search preferences\"}\n          </p>\n        </div>\n\n        {/* Step Content */}\n        <div className=\"space-y-10\">\n            {/* Budget Step */}\n            {currentStep === \"budget\" && (\n              <motion.div\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                className=\"flex justify-center\"\n                data-testid=\"step-budget\"\n              >\n                <div className=\"w-full max-w-2xl pt-8\">\n                  <RangeSlider\n                    min={500}\n                    max={10000}\n                    step={50}\n                    value={[wizardState.budgetMin, wizardState.budgetMax]}\n                    onChange={([min, max]) =>\n                      setWizardState((prev) => ({ ...prev, budgetMin: min, budgetMax: max }))\n                    }\n                    formatValue={(v) => `$${v.toLocaleString()}`}\n                    ariaLabel={[\"Minimum budget\", \"Maximum budget\"]}\n                    data-testid=\"slider-budget\"\n                  />\n                </div>\n              </motion.div>\n            )}\n\n            {/* Borough Step */}\n            {currentStep === \"borough\" && (\n              <motion.div\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                className=\"flex justify-center\"\n                data-testid=\"step-borough\"\n              >\n                <div className=\"w-full max-w-2xl grid grid-cols-1 md:grid-cols-2 gap-6\">\n              \n                {boroughs.map((borough) => {\n                  const isSelected = wizardState.selectedBoroughs.includes(borough.id);\n                  return (\n                    <motion.div\n                      key={borough.id}\n                      whileHover={{ scale: 1.02 }}\n                      whileTap={{ scale: 0.98 }}\n                      transition={{ duration: 0.18 }}\n                    >\n                      <div\n                        className={cn(\n                          \"cursor-pointer transition-all p-6 rounded-lg hover-elevate\",\n                          isSelected && \"bg-primary/5\"\n                        )}\n                        onClick={() => toggleBorough(borough.id)}\n                        onKeyDown={(e) => {\n                          if (e.key === \"Enter\" || e.key === \" \") {\n                            e.preventDefault();\n                            toggleBorough(borough.id);\n                          }\n                        }}\n                        tabIndex={0}\n                        role=\"button\"\n                        aria-pressed={isSelected}\n                        data-testid={`card-borough-${borough.id}`}\n                      >\n                        <div className=\"space-y-1\">\n                          <div className=\"flex items-center justify-between\">\n                            <h3 className=\"text-lg font-semibold\" data-testid={`text-borough-${borough.id}`}>\n                              {borough.name}\n                            </h3>\n                            {isSelected && (\n                              <Check className=\"h-5 w-5 text-primary\" data-testid={`badge-selected-${borough.id}`} />\n                            )}\n                          </div>\n                          <p className=\"text-sm text-muted-foreground\" data-testid={`text-neighborhoods-count-${borough.id}`}>\n                            {borough.neighborhoods.length} neighborhoods\n                          </p>\n                        </div>\n                      </div>\n                    </motion.div>\n                  );\n                })}\n                </div>\n              </motion.div>\n            )}\n\n            {/* Neighborhood Step */}\n            {currentStep === \"neighborhood\" && (\n              <motion.div\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                className=\"flex justify-center\"\n                data-testid=\"step-neighborhood\"\n              >\n                <div className=\"w-full max-w-2xl space-y-8\">\n              \n                {isLoadingNeighborhoods ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    Loading Manhattan neighborhoods...\n                  </div>\n                ) : sortedNeighborhoods.length === 0 && availableNeighborhoods.length === 0 ? (\n                  <EmptyState\n                    icon={MapPin}\n                    title=\"No neighborhoods available\"\n                    description=\"Unable to load neighborhood data\"\n                    action={{\n                      label: \"Go back to boroughs\",\n                      onClick: back,\n                    }}\n                  />\n                ) : (\n                  <>\n                    {/* Search Input */}\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                      <Input\n                        type=\"search\"\n                        placeholder=\"Search neighborhoods...\"\n                        value={neighborhoodSearch}\n                        onChange={(e) => setNeighborhoodSearch(e.target.value)}\n                        className=\"pl-9\"\n                        data-testid=\"input-search-neighborhoods\"\n                      />\n                    </div>\n\n                    {/* Selected Count and Clear */}\n                    {wizardState.selectedNeighborhoods.length > 0 && (\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm text-muted-foreground\" data-testid=\"text-selected-count\">\n                          Selected {wizardState.selectedNeighborhoods.length}\n                        </span>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={clearAllNeighborhoods}\n                          data-testid=\"button-clear-all\"\n                        >\n                          Clear all\n                        </Button>\n                      </div>\n                    )}\n\n                    {/* Selected Badges */}\n                    {wizardState.selectedNeighborhoods.length > 0 && (\n                      <div className=\"flex flex-wrap gap-2\" data-testid=\"container-selected-neighborhoods\">\n                        {wizardState.selectedNeighborhoods.map((id) => {\n                          // Try Manhattan neighborhoods first, fallback to borough-based\n                          const manhattanNeighborhood = neighborhoodMap.get(id);\n                          const fallbackNeighborhood = availableNeighborhoods.find((n) => n.id === id);\n                          const neighborhood = manhattanNeighborhood || fallbackNeighborhood;\n                          \n                          if (!neighborhood) return null;\n                          return (\n                            <Badge\n                              key={id}\n                              variant=\"secondary\"\n                              className=\"gap-1 pr-1\"\n                              data-testid={`badge-neighborhood-${id}`}\n                            >\n                              {neighborhood.name}\n                              <button\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  toggleNeighborhood(id);\n                                }}\n                                className=\"ml-1 hover-elevate rounded-full p-0.5\"\n                                data-testid={`button-remove-neighborhood-${id}`}\n                              >\n                                <X className=\"h-3 w-3\" />\n                              </button>\n                            </Badge>\n                          );\n                        })}\n                      </div>\n                    )}\n\n                    {/* Manhattan Neighborhoods from NYC DCP NTA */}\n                    {filteredManhattanNeighborhoods.length > 0 && (\n                      <div className=\"space-y-3\" data-testid=\"group-neighborhoods-manhattan-api\">\n                        <h3 className=\"font-semibold text-sm text-muted-foreground flex items-center gap-2\">\n                          <Layers className=\"h-4 w-4\" />\n                          Manhattan (NYC DCP Neighborhoods)\n                        </h3>\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                          {filteredManhattanNeighborhoods.map((neighborhood) => (\n                            <div\n                              key={neighborhood.id}\n                              className=\"flex items-center space-x-2 p-3 rounded-md hover-elevate border\"\n                              data-testid={`item-neighborhood-${neighborhood.id}`}\n                            >\n                              <Checkbox\n                                id={neighborhood.id}\n                                checked={wizardState.selectedNeighborhoods.includes(neighborhood.id)}\n                                onCheckedChange={() => toggleNeighborhood(neighborhood.id)}\n                                data-testid={`checkbox-neighborhood-${neighborhood.id}`}\n                              />\n                              <label\n                                htmlFor={neighborhood.id}\n                                className=\"text-sm flex-1 cursor-pointer\"\n                                data-testid={`label-neighborhood-${neighborhood.id}`}\n                              >\n                                {neighborhood.name}\n                              </label>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Other Borough Neighborhoods (fallback for non-Manhattan) */}\n                    {wizardState.selectedBoroughs.filter(id => id !== 'manhattan').map((boroughId) => {\n                      const borough = boroughs.find((b) => b.id === boroughId);\n                      if (!borough) return null;\n\n                      const boroughNeighborhoods = filteredNeighborhoods.filter(\n                        (n) => n.boroughId === borough.id\n                      );\n\n                      if (boroughNeighborhoods.length === 0) return null;\n\n                      return (\n                        <div key={borough.id} className=\"space-y-3\" data-testid={`group-neighborhoods-${borough.id}`}>\n                          <h3 className=\"font-semibold text-sm text-muted-foreground\" data-testid={`text-borough-title-${borough.id}`}>\n                            {borough.name}\n                          </h3>\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                            {boroughNeighborhoods.map((neighborhood) => (\n                              <div\n                                key={neighborhood.id}\n                                className=\"flex items-center space-x-2 p-3 rounded-lg hover-elevate\"\n                                data-testid={`item-neighborhood-${neighborhood.id}`}\n                              >\n                                <Checkbox\n                                  id={neighborhood.id}\n                                  checked={wizardState.selectedNeighborhoods.includes(neighborhood.id)}\n                                  onCheckedChange={() => toggleNeighborhood(neighborhood.id)}\n                                  data-testid={`checkbox-neighborhood-${neighborhood.id}`}\n                                />\n                                <label\n                                  htmlFor={neighborhood.id}\n                                  className=\"text-sm flex-1 cursor-pointer\"\n                                  data-testid={`label-neighborhood-${neighborhood.id}`}\n                                >\n                                  {neighborhood.name}\n                                </label>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </>\n                )}\n                </div>\n              </motion.div>\n            )}\n\n            {/* Map Step */}\n            {currentStep === \"map\" && (\n              <motion.div\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                className=\"flex justify-center\"\n                data-testid=\"step-map\"\n              >\n                <div className=\"w-full max-w-3xl space-y-8\">\n              \n                {!mapboxConfig.token ? (\n                  <EmptyState\n                    icon={MapIcon}\n                    title=\"Map not available\"\n                    description=\"Mapbox token is not configured. Set MAPBOX_TOKEN to enable the map.\"\n                  />\n                ) : mapError ? (\n                  <div className=\"space-y-4\">\n                    <div className=\"text-sm text-muted-foreground text-center p-8 bg-muted/30 rounded-lg border-2 border-dashed\" data-testid=\"text-map-unavailable\">\n                      <MapIcon className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground/50\" />\n                      <p className=\"font-medium mb-2\">Map preview unavailable</p>\n                      <p className=\"text-xs\">The interactive map requires WebGL support. You can still proceed with your neighborhood selections.</p>\n                    </div>\n                    {!mapboxConfig.tilesUrl && (\n                      <div className=\"text-sm text-muted-foreground text-center p-4 bg-muted/50 rounded-lg\" data-testid=\"text-blocks-info\">\n                        <p>Interactive block selection requires custom tiles configuration.</p>\n                      </div>\n                    )}\n                  </div>\n                ) : (\n                  <>\n                    {/* Selection Tools */}\n                    <div className=\"space-y-4\">\n                      <h3 className=\"text-sm font-medium\">Selection Tools</h3>\n                      <div className=\"flex gap-3\">\n                        <Button\n                          variant={selectionMode === 'include' ? 'default' : 'ghost'}\n                          size=\"sm\"\n                          onClick={() => handleModeChange('include')}\n                          className=\"flex-1\"\n                          data-testid=\"button-mode-include\"\n                        >\n                          Include Mode\n                        </Button>\n                        <Button\n                          variant={selectionMode === 'exclude' ? 'default' : 'ghost'}\n                          size=\"sm\"\n                          onClick={() => handleModeChange('exclude')}\n                          className=\"flex-1\"\n                          data-testid=\"button-mode-exclude\"\n                        >\n                          Exclude Mode\n                        </Button>\n                      </div>\n                      \n                      <div className=\"flex gap-3\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={handleInvert}\n                          className=\"flex-1\"\n                          data-testid=\"button-invert\"\n                        >\n                          <RotateCcw className=\"h-4 w-4 mr-2\" />\n                          Invert\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={handleClearAll}\n                          className=\"flex-1\"\n                          data-testid=\"button-clear-all-blocks\"\n                        >\n                          <X className=\"h-4 w-4 mr-2\" />\n                          Clear All\n                        </Button>\n                      </div>\n                    </div>\n\n                    <div\n                      ref={mapContainer}\n                      style={{ height: '520px', width: '100%' }}\n                      className=\"rounded-lg overflow-hidden [&_.mapboxgl-canvas]:rounded-lg\"\n                      data-testid=\"map-container\"\n                    />\n                    {!mapboxConfig.tilesUrl && (\n                      <div className=\"text-sm text-muted-foreground text-center p-4 bg-muted/50 rounded-lg\" data-testid=\"text-blocks-info\">\n                        <p>Interactive block selection requires custom tiles configuration.</p>\n                      </div>\n                    )}\n                  </>\n                )}\n                \n                {/* Selected Blocks */}\n                {wizardState.selectedBlocks.size > 0 && (\n                  <div className=\"pt-4 border-t border-border/50\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm font-medium\" data-testid=\"text-blocks-label\">\n                        {selectedBoroughNames.join(\", \")} • {selectedNeighborhoodNames.length} neighborhoods • {wizardState.selectedBlocks.size} blocks\n                      </span>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={handleClearAllBlocks}\n                        data-testid=\"button-clear-all-blocks\"\n                      >\n                        Clear All\n                      </Button>\n                    </div>\n                    <div className=\"flex items-center gap-2 flex-wrap\">\n                      {Array.from(wizardState.selectedBlocks).map((blockId) => (\n                        <Badge\n                          key={blockId}\n                          variant=\"secondary\"\n                          className=\"pr-1 gap-1\"\n                          data-testid={`badge-block-${blockId}`}\n                        >\n                          Block {blockId}\n                          <button\n                            onClick={() => handleRemoveBlock(blockId)}\n                            className=\"ml-1 hover-elevate rounded-full p-0.5\"\n                            data-testid={`button-remove-block-${blockId}`}\n                          >\n                            <X className=\"h-3 w-3\" />\n                          </button>\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                )}\n                </div>\n              </motion.div>\n            )}\n\n            {/* Review Step */}\n            {currentStep === \"review\" && (\n              <motion.div\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                className=\"flex justify-center\"\n                data-testid=\"step-review\"\n              >\n                <div className=\"w-full max-w-2xl space-y-10\">\n              \n                {/* Budget Summary */}\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"text-sm font-semibold\">Budget</h3>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => goTo('budget')}\n                      data-testid=\"button-edit-budget\"\n                    >\n                      Edit\n                    </Button>\n                  </div>\n                  <p className=\"text-2xl font-bold tabular-nums\">\n                    ${wizardState.budgetMin.toLocaleString()} – ${wizardState.budgetMax.toLocaleString()}\n                    <span className=\"text-sm font-normal text-muted-foreground ml-2\">/month</span>\n                  </p>\n                </div>\n\n                {/* Boroughs Summary */}\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"text-sm font-semibold\">Boroughs</h3>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => goTo('borough')}\n                      data-testid=\"button-edit-boroughs\"\n                    >\n                      Edit\n                    </Button>\n                  </div>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {selectedBoroughNames.map((name) => (\n                      <Badge key={name} variant=\"secondary\">{name}</Badge>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Neighborhoods Summary */}\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"text-sm font-semibold\">Neighborhoods</h3>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => goTo('neighborhood')}\n                      data-testid=\"button-edit-neighborhoods\"\n                    >\n                      Edit\n                    </Button>\n                  </div>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {selectedNeighborhoodNames.map((name) => (\n                      <Badge key={name} variant=\"secondary\">{name}</Badge>\n                    ))}\n                  </div>\n                </div>\n\n                {/* Blocks Summary */}\n                {wizardState.selectedBlocks.size > 0 && (\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <h3 className=\"text-sm font-semibold\">Selected Blocks</h3>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => goTo('map')}\n                        data-testid=\"button-edit-blocks\"\n                      >\n                        Edit\n                      </Button>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {wizardState.selectedBlocks.size} blocks selected\n                    </p>\n                  </div>\n                )}\n\n                {wizardState.selectedBlocks.size === 0 && (\n                  <EmptyState\n                    icon={MapIcon}\n                    title=\"No blocks selected\"\n                    description=\"Add specific blocks to narrow your search, or proceed to see all available apartments in your selected neighborhoods.\"\n                    action={{\n                      label: \"Select blocks\",\n                      onClick: () => goTo('map'),\n                    }}\n                  />\n                )}\n                </div>\n              </motion.div>\n            )}\n\n            {/* Navigation Buttons */}\n            <div className=\"flex items-center justify-between pt-10\">\n              <Button\n                variant=\"ghost\"\n                onClick={back}\n                disabled={isFirstStep}\n                data-testid=\"button-back\"\n              >\n                <ChevronLeft className=\"mr-2 h-4 w-4\" />\n                Back\n              </Button>\n\n              <Button\n                onClick={handleNext}\n                disabled={!canProceed()}\n                data-testid=\"button-next\"\n              >\n                {currentStep === \"review\" ? (\n                  \"Find Apartments\"\n                ) : (\n                  <>\n                    Next\n                    <ChevronRight className=\"ml-2 h-4 w-4\" />\n                  </>\n                )}\n              </Button>\n            </div>\n        </div>\n      </div>\n    </AppShell>\n  );\n}\n","size_bytes":61089},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport NotFound from \"@/pages/not-found\";\nimport BlocksOnboardingWizard from \"@/components/BlocksOnboardingWizard\";\nimport Results from \"@/pages/Results\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={BlocksOnboardingWizard} />\n      <Route path=\"/results\" component={Results} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"light\">\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":984},"client/src/components/ui/progress-stepper.tsx":{"content":"import * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Check } from \"lucide-react\";\n\nexport interface Step {\n  id: string;\n  label: string;\n}\n\nexport interface ProgressStepperProps {\n  steps: Step[];\n  currentStep: string;\n  onStepClick?: (stepId: string) => void;\n  className?: string;\n}\n\n/**\n * ProgressStepper - Minimal horizontal breadcrumb-style progress indicator\n * \n * Features:\n * - Current step highlighted with bold weight\n * - Completed steps shown with check icon\n * - Clean text-based design inspired by Linear\n */\nexport const ProgressStepper: React.FC<ProgressStepperProps> = ({\n  steps,\n  currentStep,\n  onStepClick,\n  className,\n}) => {\n  const currentIndex = steps.findIndex((step) => step.id === currentStep);\n\n  return (\n    <div className={cn(\"w-full\", className)} data-testid=\"progress-stepper\">\n      <div className=\"flex items-center justify-center gap-3\">\n        {steps.map((step, index) => {\n          const isCompleted = index < currentIndex;\n          const isCurrent = step.id === currentStep;\n          const isClickable = onStepClick && (isCompleted || isCurrent);\n\n          return (\n            <React.Fragment key={step.id}>\n              <button\n                onClick={() => isClickable && onStepClick?.(step.id)}\n                disabled={!isClickable}\n                className={cn(\n                  \"flex items-center gap-1.5 transition-colors text-sm\",\n                  isClickable && \"cursor-pointer hover:text-foreground\",\n                  !isClickable && \"cursor-default\"\n                )}\n                data-testid={`step-${step.id}`}\n                aria-current={isCurrent ? \"step\" : undefined}\n              >\n                {isCompleted && (\n                  <Check className=\"h-3.5 w-3.5 text-primary\" data-testid={`check-${step.id}`} />\n                )}\n                <span\n                  className={cn(\n                    \"transition-all\",\n                    isCurrent && \"text-foreground font-semibold\",\n                    isCompleted && \"text-muted-foreground font-normal\",\n                    !isCompleted && !isCurrent && \"text-muted-foreground/50 font-normal\"\n                  )}\n                >\n                  {step.label}\n                </span>\n              </button>\n\n              {index < steps.length - 1 && (\n                <span className=\"text-muted-foreground/30 select-none\">/</span>\n              )}\n            </React.Fragment>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n","size_bytes":2505},"client/src/components/ui/range-slider.tsx":{"content":"import * as React from \"react\";\nimport * as SliderPrimitive from \"@radix-ui/react-slider\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface RangeSliderProps\n  extends Omit<React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>, \"value\" | \"onValueChange\" | \"onChange\"> {\n  min: number;\n  max: number;\n  step?: number;\n  value: [number, number];\n  onChange: (value: [number, number]) => void;\n  formatValue?: (value: number) => string;\n  ariaLabel?: [string, string];\n}\n\n/**\n * RangeSlider - Dual handle slider with numeric chips\n * \n * Features:\n * - Dual handles for range selection\n * - Numeric chips above each thumb\n * - Gradient track behind selected range\n * - Keyboard accessible with ARIA labels\n * - Prevents handles from crossing\n */\nexport const RangeSlider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  RangeSliderProps\n>(({ \n  className, \n  min, \n  max, \n  step = 1, \n  value, \n  onChange, \n  formatValue = (v) => v.toString(),\n  ariaLabel = [\"Minimum value\", \"Maximum value\"],\n  ...props \n}, ref) => {\n  // Prevent handles from crossing by clamping values\n  const handleValueChange = (newValue: number[]) => {\n    if (newValue.length === 2) {\n      const [newMin, newMax] = newValue;\n      // Ensure min is always less than or equal to max\n      const clampedMin = Math.min(newMin, newMax - step);\n      const clampedMax = Math.max(newMax, newMin + step);\n      onChange([clampedMin, clampedMax] as [number, number]);\n    }\n  };\n\n  return (\n    <SliderPrimitive.Root\n      ref={ref}\n      className={cn(\n        \"relative flex w-full touch-none select-none items-center\",\n        className\n      )}\n      min={min}\n      max={max}\n      step={step}\n      value={value}\n      onValueChange={handleValueChange}\n      minStepsBetweenThumbs={1}\n      {...props}\n    >\n      <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n        <SliderPrimitive.Range \n          className=\"absolute h-full\" \n          style={{\n            background: 'linear-gradient(90deg, hsl(var(--ink)) 0%, hsl(var(--accent)) 100%)'\n          }}\n        />\n      </SliderPrimitive.Track>\n      \n      {/* First thumb (min) */}\n      <SliderPrimitive.Thumb \n        className=\"relative block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\"\n        aria-label={ariaLabel[0]}\n        data-testid=\"slider-thumb-min\"\n      >\n        <div className=\"absolute -top-10 left-1/2 -translate-x-1/2 whitespace-nowrap\">\n          <div className=\"rounded-lg bg-primary px-3 py-1.5 text-xs font-medium text-primary-foreground tabular-nums shadow-card\">\n            {formatValue(value[0])}\n          </div>\n        </div>\n      </SliderPrimitive.Thumb>\n      \n      {/* Second thumb (max) */}\n      <SliderPrimitive.Thumb \n        className=\"relative block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\"\n        aria-label={ariaLabel[1]}\n        data-testid=\"slider-thumb-max\"\n      >\n        <div className=\"absolute -top-10 left-1/2 -translate-x-1/2 whitespace-nowrap\">\n          <div className=\"rounded-lg bg-primary px-3 py-1.5 text-xs font-medium text-primary-foreground tabular-nums shadow-card\">\n            {formatValue(value[1])}\n          </div>\n        </div>\n      </SliderPrimitive.Thumb>\n    </SliderPrimitive.Root>\n  );\n});\n\nRangeSlider.displayName = \"RangeSlider\";\n","size_bytes":3740},"client/src/components/ui/form-hint.tsx":{"content":"import * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Info } from \"lucide-react\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\nexport interface FormHintProps {\n  children: React.ReactNode;\n  tooltip?: string;\n  className?: string;\n}\n\n/**\n * FormHint - Helper text with optional info tooltip\n * \n * Displays small helper text below form fields.\n * Optionally shows an info icon with tooltip for additional context.\n */\nexport const FormHint: React.FC<FormHintProps> = ({\n  children,\n  tooltip,\n  className,\n}) => {\n  return (\n    <div className={cn(\"flex items-center gap-1.5 text-sm text-muted-foreground\", className)}>\n      <span data-testid=\"hint-text\">{children}</span>\n      {tooltip && (\n        <Tooltip>\n          <TooltipTrigger asChild>\n            <button\n              type=\"button\"\n              className=\"inline-flex hover-elevate rounded-full p-0.5\"\n              data-testid=\"hint-tooltip-trigger\"\n            >\n              <Info className=\"h-3.5 w-3.5\" />\n              <span className=\"sr-only\">More information</span>\n            </button>\n          </TooltipTrigger>\n          <TooltipContent>\n            <p className=\"max-w-xs\" data-testid=\"hint-tooltip-content\">{tooltip}</p>\n          </TooltipContent>\n        </Tooltip>\n      )}\n    </div>\n  );\n};\n","size_bytes":1344},"client/src/hooks/useStep.ts":{"content":"import { useState, useCallback } from 'react';\n\nexport type WizardStep = 'budget' | 'borough' | 'neighborhood' | 'map' | 'review';\n\nconst STEPS: WizardStep[] = ['budget', 'borough', 'neighborhood', 'map', 'review'];\n\nexport interface UseStepReturn {\n  currentStep: WizardStep;\n  currentStepIndex: number;\n  totalSteps: number;\n  isFirstStep: boolean;\n  isLastStep: boolean;\n  next: () => void;\n  back: () => void;\n  goTo: (step: WizardStep | number) => void;\n  canProceed: (validator?: () => boolean) => boolean;\n  reset: () => void;\n}\n\n/**\n * useStep Hook\n * \n * Manages wizard step navigation with validation support.\n * Provides guarded transitions that can validate before moving forward.\n * \n * @param initialStep - The starting step (defaults to 'budget')\n * @returns Step management utilities\n */\nexport function useStep(initialStep: WizardStep = 'budget'): UseStepReturn {\n  const [currentStep, setCurrentStep] = useState<WizardStep>(initialStep);\n  \n  const currentStepIndex = STEPS.indexOf(currentStep);\n  const totalSteps = STEPS.length;\n  const isFirstStep = currentStepIndex === 0;\n  const isLastStep = currentStepIndex === totalSteps - 1;\n\n  /**\n   * Move to the next step\n   */\n  const next = useCallback(() => {\n    if (!isLastStep) {\n      setCurrentStep(STEPS[currentStepIndex + 1]);\n      // Scroll to top on step change\n      window.scrollTo({ top: 0, behavior: 'smooth' });\n    }\n  }, [currentStepIndex, isLastStep]);\n\n  /**\n   * Move to the previous step\n   */\n  const back = useCallback(() => {\n    if (!isFirstStep) {\n      setCurrentStep(STEPS[currentStepIndex - 1]);\n      // Scroll to top on step change\n      window.scrollTo({ top: 0, behavior: 'smooth' });\n    }\n  }, [currentStepIndex, isFirstStep]);\n\n  /**\n   * Jump to a specific step\n   */\n  const goTo = useCallback((step: WizardStep | number) => {\n    if (typeof step === 'number') {\n      if (step >= 0 && step < totalSteps) {\n        setCurrentStep(STEPS[step]);\n        window.scrollTo({ top: 0, behavior: 'smooth' });\n      }\n    } else {\n      if (STEPS.includes(step)) {\n        setCurrentStep(step);\n        window.scrollTo({ top: 0, behavior: 'smooth' });\n      }\n    }\n  }, [totalSteps]);\n\n  /**\n   * Check if user can proceed (with optional validation)\n   */\n  const canProceed = useCallback((validator?: () => boolean) => {\n    if (validator) {\n      return validator();\n    }\n    return true;\n  }, []);\n\n  /**\n   * Reset to initial step\n   */\n  const reset = useCallback(() => {\n    setCurrentStep(initialStep);\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  }, [initialStep]);\n\n  return {\n    currentStep,\n    currentStepIndex,\n    totalSteps,\n    isFirstStep,\n    isLastStep,\n    next,\n    back,\n    goTo,\n    canProceed,\n    reset,\n  };\n}\n","size_bytes":2747},"client/src/components/ui/empty-state.tsx":{"content":"import * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { LucideIcon } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport interface EmptyStateProps {\n  icon?: LucideIcon;\n  title: string;\n  description?: string;\n  action?: {\n    label: string;\n    onClick: () => void;\n  };\n  className?: string;\n}\n\n/**\n * EmptyState - Display for empty or error states\n * \n * Features:\n * - Optional icon\n * - Title and description\n * - Optional call-to-action button\n */\nexport const EmptyState: React.FC<EmptyStateProps> = ({\n  icon: Icon,\n  title,\n  description,\n  action,\n  className,\n}) => {\n  return (\n    <div\n      className={cn(\n        \"flex flex-col items-center justify-center text-center py-12 px-4\",\n        className\n      )}\n      data-testid=\"empty-state\"\n    >\n      {Icon && (\n        <div className=\"mb-4 rounded-full bg-muted p-4\" data-testid=\"empty-state-icon\">\n          <Icon className=\"h-8 w-8 text-muted-foreground\" />\n        </div>\n      )}\n      \n      <h3 className=\"text-lg font-semibold text-foreground mb-2\" data-testid=\"empty-state-title\">\n        {title}\n      </h3>\n      \n      {description && (\n        <p className=\"text-sm text-muted-foreground max-w-sm mb-6\" data-testid=\"empty-state-description\">\n          {description}\n        </p>\n      )}\n      \n      {action && (\n        <Button onClick={action.onClick} data-testid=\"empty-state-action\">\n          {action.label}\n        </Button>\n      )}\n    </div>\n  );\n};\n","size_bytes":1485},"client/src/theme/theme.ts":{"content":"/**\n * Blocks NYC Design System\n * \n * Central theme configuration for the Blocks NYC apartment search experience.\n * Visual language inspired by architectural studios with subtle motion and high legibility.\n */\n\nexport const theme = {\n  // Color Palette\n  colors: {\n    ink: '#0A0A0A',\n    ink2: '#111111',\n    charcoal: '#1E1E1E',\n    gray1: '#F5F5F5',\n    gray2: '#EDEDED',\n    gray3: '#DCDCDC',\n    accentBlue: '#3D8BFF',\n    accentRed: '#FF6B6B',\n    success: '#16A34A',\n    warning: '#F59E0B',\n    textPrimary: '#0A0A0A',\n    textSecondary: '#525252',\n    border: '#E5E7EB',\n  },\n\n  // Typography\n  typography: {\n    fonts: {\n      primary: 'Inter',\n      display: 'DM Sans',\n    },\n    sizes: {\n      h1: { size: '32px', lineHeight: '36px', weight: 700 },\n      h2: { size: '24px', lineHeight: '28px', weight: 700 },\n      h3: { size: '20px', lineHeight: '24px', weight: 600 },\n      body: { size: '16px', lineHeight: '24px', weight: 400 },\n      label: { size: '14px', lineHeight: '20px', weight: 500 },\n    },\n  },\n\n  // Border Radius\n  radius: {\n    default: '16px',\n    card: '24px',\n    button: '12px',\n  },\n\n  // Shadows\n  shadows: {\n    card: '0px 2px 8px 0px rgba(0, 0, 0, 0.04), 0px 1px 2px 0px rgba(0, 0, 0, 0.06)',\n    popover: '0px 4px 16px 0px rgba(0, 0, 0, 0.08), 0px 2px 4px 0px rgba(0, 0, 0, 0.06)',\n  },\n\n  // Motion\n  motion: {\n    duration: {\n      fast: '180ms',\n      normal: '200ms',\n      slow: '220ms',\n    },\n    easing: 'cubic-bezier(0.4, 0, 0.2, 1)', // easeInOut\n  },\n\n  // Layout\n  layout: {\n    maxWidth: '960px',\n    gutterMobile: '20px',\n    gutterDesktop: '20px',\n  },\n\n  // Steps\n  steps: [\n    { id: 'budget', label: 'Budget' },\n    { id: 'borough', label: 'Borough' },\n    { id: 'neighborhood', label: 'Neighborhood' },\n    { id: 'blocks', label: 'Blocks' },\n    { id: 'review', label: 'Review' },\n  ] as const,\n} as const;\n\nexport type Theme = typeof theme;\nexport type StepId = typeof theme.steps[number]['id'];\n","size_bytes":1957},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"light\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"light\",\n  storageKey = \"blocks-nyc-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1374},"client/src/components/layout/AppShell.tsx":{"content":"import * as React from \"react\";\nimport { Link } from \"wouter\";\nimport { Moon, Sun } from \"lucide-react\";\nimport { useTheme } from \"@/components/theme-provider\";\nimport { Button } from \"@/components/ui/button\";\nimport { ProgressStepper, type Step } from \"@/components/ui/progress-stepper\";\nimport { cn } from \"@/lib/utils\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\nexport interface AppShellProps {\n  children: React.ReactNode;\n  currentStep?: string;\n  steps?: Step[];\n  onStepClick?: (stepId: string) => void;\n  showStepper?: boolean;\n  className?: string;\n  onLogoClick?: () => void;\n}\n\n/**\n * AppShell - Minimal layout wrapper for Blocks NYC\n * \n * Features:\n * - Clean top bar with wordmark and theme toggle\n * - Progress indicator (when applicable)\n * - Maximum breathing room with minimal chrome\n */\nexport const AppShell: React.FC<AppShellProps> = ({\n  children,\n  currentStep,\n  steps,\n  onStepClick,\n  showStepper = true,\n  className,\n  onLogoClick,\n}) => {\n  const { theme, setTheme } = useTheme();\n\n  const toggleTheme = () => {\n    setTheme(theme === \"light\" ? \"dark\" : \"light\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex flex-col\">\n      {/* Minimal Header */}\n      <header className=\"sticky top-0 z-50 bg-background\">\n        <div className=\"container mx-auto\">\n          <div className=\"flex h-16 items-center justify-between\">\n            {/* Logo/Wordmark */}\n            <button\n              type=\"button\"\n              onClick={onLogoClick || (() => {})}\n              className=\"text-xl font-display font-bold tracking-tight text-foreground transition-opacity hover:opacity-70 cursor-pointer bg-transparent border-none p-0\"\n              data-testid=\"button-logo-reset\"\n            >\n              Blocks NYC\n            </button>\n\n            {/* Step Indicator (Center) - Hidden on mobile */}\n            {showStepper && steps && currentStep && (\n              <div className=\"hidden md:block flex-1 max-w-md mx-8\">\n                <ProgressStepper\n                  steps={steps}\n                  currentStep={currentStep}\n                  onStepClick={onStepClick}\n                />\n              </div>\n            )}\n\n            {/* Theme Toggle */}\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={toggleTheme}\n              className=\"shrink-0\"\n              data-testid=\"button-theme-toggle\"\n            >\n              {theme === \"light\" ? (\n                <Moon className=\"h-4 w-4\" />\n              ) : (\n                <Sun className=\"h-4 w-4\" />\n              )}\n              <span className=\"sr-only\">Toggle theme</span>\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content with Animation */}\n      <main className={cn(\"flex-1 container mx-auto py-12\", className)}>\n        <AnimatePresence mode=\"wait\">\n          <motion.div\n            key={currentStep || \"default\"}\n            initial={{ opacity: 0, y: 8 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -8 }}\n            transition={{ duration: 0.2, ease: \"easeInOut\" }}\n          >\n            {children}\n          </motion.div>\n        </AnimatePresence>\n      </main>\n\n      {/* Minimal Footer */}\n      <footer className=\"py-8 mt-auto\">\n        <div className=\"container mx-auto\">\n          <div className=\"flex items-center justify-center gap-6 text-xs text-muted-foreground\">\n            <Link href=\"/about\" className=\"hover:text-foreground transition-colors\" data-testid=\"link-about\">\n              About\n            </Link>\n            <Link href=\"/privacy\" className=\"hover:text-foreground transition-colors\" data-testid=\"link-privacy\">\n              Privacy\n            </Link>\n            <span>© {new Date().getFullYear()} Blocks NYC</span>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n};\n","size_bytes":3885},"client/src/lib/selectionStore.ts":{"content":"/**\n * SelectionStore - Manages block selection state with Set-based operations\n * Supports Include and Exclude modes with invert functionality\n */\n\nexport type SelectionMode = 'include' | 'exclude';\n\nexport class SelectionStore {\n  private selected: Set<string> = new Set();\n  private mode: SelectionMode = 'include';\n  private listeners: Set<() => void> = new Set();\n\n  constructor() {\n    // Load mode from localStorage\n    const savedMode = localStorage.getItem('blocks-selection-mode');\n    if (savedMode === 'include' || savedMode === 'exclude') {\n      this.mode = savedMode;\n    }\n  }\n\n  getMode(): SelectionMode {\n    return this.mode;\n  }\n\n  setMode(mode: SelectionMode): void {\n    this.mode = mode;\n    localStorage.setItem('blocks-selection-mode', mode);\n    this.notifyListeners();\n  }\n\n  isSelected(id: string): boolean {\n    return this.selected.has(id);\n  }\n\n  setSelected(id: string, selected: boolean): void {\n    if (selected) {\n      this.selected.add(id);\n    } else {\n      this.selected.delete(id);\n    }\n    this.notifyListeners();\n  }\n\n  toggle(id: string): void {\n    if (this.selected.has(id)) {\n      this.selected.delete(id);\n    } else {\n      this.selected.add(id);\n    }\n    this.notifyListeners();\n  }\n\n  add(id: string): void {\n    this.selected.add(id);\n    this.notifyListeners();\n  }\n\n  selectMany(ids: string[]): void {\n    ids.forEach(id => this.selected.add(id));\n    this.notifyListeners();\n  }\n\n  selectAll(ids: string[]): void {\n    ids.forEach(id => this.selected.add(id));\n    this.notifyListeners();\n  }\n\n  clearAll(): void {\n    this.selected.clear();\n    this.notifyListeners();\n  }\n\n  getSelected(): Set<string> {\n    return new Set(this.selected);\n  }\n\n  getSelectedArray(): string[] {\n    return Array.from(this.selected);\n  }\n\n  getCount(): number {\n    return this.selected.size;\n  }\n\n  invert(allIds: string[]): void {\n    const newSelection = new Set<string>();\n    allIds.forEach(id => {\n      if (!this.selected.has(id)) {\n        newSelection.add(id);\n      }\n    });\n    this.selected = newSelection;\n    this.notifyListeners();\n  }\n\n  subscribe(listener: () => void): () => void {\n    this.listeners.add(listener);\n    return () => {\n      this.listeners.delete(listener);\n    };\n  }\n\n  private notifyListeners(): void {\n    this.listeners.forEach(listener => listener());\n  }\n}\n","size_bytes":2340},"client/src/lib/neighborhoods.ts":{"content":"import * as turf from '@turf/turf';\nimport type { Feature, FeatureCollection, Polygon, MultiPolygon, BBox } from 'geojson';\n\nexport interface NeighborhoodProperties {\n  nta2020?: string;  // 2020 NTA code\n  ntaname?: string;  // Neighborhood name\n  borocode?: string | number;  // Borough code\n  boroname?: string;  // Borough name\n  ntaabbrev?: string;  // NTA abbreviation\n  ntatype?: string;  // NTA type\n  cdta2020?: string;  // Community District code\n  cdtaname?: string;  // Community District name\n  [key: string]: any;\n}\n\nexport type NeighborhoodFeature = Feature<Polygon | MultiPolygon, NeighborhoodProperties>;\n\nexport interface NeighborhoodData {\n  id: string;\n  name: string;\n  slug: string;\n  bbox: BBox;\n  feature: NeighborhoodFeature;\n  geometry: Polygon | MultiPolygon;\n}\n\nexport type NeighborhoodsGeoJSON = FeatureCollection<Polygon | MultiPolygon, NeighborhoodProperties>;\n\n/**\n * Fetch NYC DCP Neighborhood Tabulation Areas for Manhattan\n * Dataset: 2020 Neighborhood Tabulation Areas (NTAs)\n * ID: 9nt8-h7nd\n */\nexport async function fetchManhattanNeighborhoods(): Promise<NeighborhoodsGeoJSON> {\n  const url = 'https://data.cityofnewyork.us/resource/9nt8-h7nd.geojson?borocode=1&$limit=500';\n  \n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch neighborhoods: ${response.statusText}`);\n    }\n    \n    const data = await response.json();\n    console.log('Fetched Manhattan neighborhoods:', data.features?.length, 'features');\n    return data as NeighborhoodsGeoJSON;\n  } catch (error) {\n    console.error('Error fetching Manhattan neighborhoods:', error);\n    // Return empty FeatureCollection on error\n    return {\n      type: 'FeatureCollection',\n      features: []\n    };\n  }\n}\n\n/**\n * Process neighborhood GeoJSON into structured data\n */\nexport function processNeighborhoods(geojson: NeighborhoodsGeoJSON): Map<string, NeighborhoodData> {\n  const neighborhoodMap = new Map<string, NeighborhoodData>();\n\n  geojson.features.forEach((feature) => {\n    // Extract properties using 2020 NTA field names\n    const ntaCode = feature.properties.nta2020 || '';\n    const ntaName = feature.properties.ntaname || '';\n    \n    if (!ntaCode || !ntaName) {\n      console.warn('Skipping feature without NTA code or name:', feature.properties);\n      return;\n    }\n\n    // Create slug from name\n    const slug = ntaName.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '');\n\n    // Compute bbox for this feature\n    const bbox = turf.bbox(feature);\n\n    neighborhoodMap.set(ntaCode, {\n      id: ntaCode,\n      name: ntaName,\n      slug,\n      bbox,\n      feature,\n      geometry: feature.geometry\n    });\n  });\n\n  console.log('Processed neighborhoods:', neighborhoodMap.size);\n  return neighborhoodMap;\n}\n\n/**\n * Get alphabetically sorted neighborhood list\n */\nexport function getSortedNeighborhoods(neighborhoodMap: Map<string, NeighborhoodData>): NeighborhoodData[] {\n  return Array.from(neighborhoodMap.values()).sort((a, b) => a.name.localeCompare(b.name));\n}\n\n/**\n * Compute combined bbox for selected neighborhoods\n */\nexport function computeCombinedBbox(\n  neighborhoodIds: string[],\n  neighborhoodMap: Map<string, NeighborhoodData>\n): BBox | null {\n  const features = neighborhoodIds\n    .map(id => neighborhoodMap.get(id)?.feature)\n    .filter((f): f is NeighborhoodFeature => f !== undefined);\n\n  if (features.length === 0) {\n    return null;\n  }\n\n  const featureCollection = turf.featureCollection(features);\n\n  return turf.bbox(featureCollection);\n}\n\n/**\n * Group neighborhoods alphabetically by first letter\n */\nexport function groupNeighborhoodsByLetter(neighborhoods: NeighborhoodData[]): Record<string, NeighborhoodData[]> {\n  const groups: Record<string, NeighborhoodData[]> = {};\n  \n  neighborhoods.forEach(neighborhood => {\n    const firstLetter = neighborhood.name.charAt(0).toUpperCase();\n    if (!groups[firstLetter]) {\n      groups[firstLetter] = [];\n    }\n    groups[firstLetter].push(neighborhood);\n  });\n  \n  return groups;\n}\n","size_bytes":4035},"client/src/components/ListingCard.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Bed, Bath, MapPin } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ListingCardProps {\n  address: string;\n  bedrooms: number;\n  bathrooms: number;\n  rent: number;\n  images: string[];\n}\n\nexport function ListingCard({ address, bedrooms, bathrooms, rent, images }: ListingCardProps) {\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n\n  return (\n    <Card className=\"overflow-hidden hover-elevate transition-all\" data-testid={`card-listing-${address.replace(/\\s+/g, '-')}`}>\n      <CardContent className=\"p-0\">\n        {/* Image Gallery */}\n        <div className=\"relative aspect-[4/3]\">\n          <img\n            src={images[currentImageIndex]}\n            alt={`${address} - Image ${currentImageIndex + 1}`}\n            className=\"w-full h-full object-cover\"\n          />\n          \n          {/* Image Indicators */}\n          {images.length > 1 && (\n            <div className=\"absolute bottom-3 left-1/2 -translate-x-1/2 flex gap-1.5\">\n              {images.map((_, index) => (\n                <button\n                  key={index}\n                  onClick={() => setCurrentImageIndex(index)}\n                  className={cn(\n                    \"w-1.5 h-1.5 rounded-full transition-all\",\n                    index === currentImageIndex \n                      ? \"bg-background w-4\" \n                      : \"bg-background/60\"\n                  )}\n                  aria-label={`Go to image ${index + 1}`}\n                />\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Listing Details */}\n        <div className=\"p-3 space-y-2\">\n          {/* Rent Price */}\n          <div className=\"flex items-baseline justify-between\">\n            <div>\n              <span className=\"text-2xl font-bold tabular-nums\" data-testid=\"text-rent\">\n                ${rent.toLocaleString()}\n              </span>\n              <span className=\"text-sm text-muted-foreground ml-1\">/month</span>\n            </div>\n          </div>\n\n          {/* Address */}\n          <div className=\"flex items-start gap-2\">\n            <MapPin className=\"h-4 w-4 text-muted-foreground mt-0.5 shrink-0\" />\n            <span className=\"text-sm font-medium\" data-testid=\"text-address\">{address}</span>\n          </div>\n\n          {/* Bed/Bath Info */}\n          <div className=\"flex gap-4\">\n            <div className=\"flex items-center gap-1.5\" data-testid=\"text-bedrooms\">\n              <Bed className=\"h-4 w-4 text-muted-foreground\" />\n              <span className=\"text-sm font-medium\">{bedrooms} BR</span>\n            </div>\n            <div className=\"flex items-center gap-1.5\" data-testid=\"text-bathrooms\">\n              <Bath className=\"h-4 w-4 text-muted-foreground\" />\n              <span className=\"text-sm font-medium\">{bathrooms} BA</span>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3026},"client/src/pages/Results.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ChevronLeft, MapPin } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\nimport { ListingCard } from \"@/components/ListingCard\";\nimport image1 from \"@assets/image 1_1760722457385.webp\";\nimport image2 from \"@assets/image 2_1760722457383.webp\";\n\nexport default function Results() {\n  const [, setLocation] = useLocation();\n\n  // Mock preferences for now - will be passed via location state or context later\n  const searchPreferences = {\n    budgetMin: 1500,\n    budgetMax: 4000,\n    boroughs: [] as string[],\n    neighborhoods: [] as string[],\n    blockCount: 0\n  };\n\n  // Test listing - can be easily removed later\n  const testListings = [\n    {\n      id: \"test-1\",\n      address: \"47 East 1st Street #3R\",\n      bedrooms: 2,\n      bathrooms: 2,\n      rent: 5795,\n      images: [image1, image2],\n    },\n  ];\n\n  const handleBackToSearch = () => {\n    setLocation(\"/\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header with search summary */}\n      <div className=\"sticky top-0 z-40 bg-background border-b\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between gap-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleBackToSearch}\n              data-testid=\"button-back-to-search\"\n            >\n              <ChevronLeft className=\"mr-1 h-4 w-4\" />\n              Back to Search\n            </Button>\n\n            <div className=\"flex items-center gap-6\">\n              <div className=\"flex items-center gap-2\" data-testid=\"text-budget-summary\">\n                <span className=\"font-bold tabular-nums\">\n                  ${searchPreferences.budgetMin.toLocaleString()} – ${searchPreferences.budgetMax.toLocaleString()}\n                  <span className=\"text-sm font-normal text-muted-foreground ml-2\">/month</span>\n                </span>\n              </div>\n              {searchPreferences.boroughs.length > 0 && (\n                <div className=\"hidden md:flex items-center gap-2\">\n                  <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n                  <div className=\"flex gap-1\">\n                    {searchPreferences.boroughs.slice(0, 2).map((borough) => (\n                      <Badge key={borough} variant=\"secondary\" className=\"text-xs\">\n                        {borough}\n                      </Badge>\n                    ))}\n                    {searchPreferences.boroughs.length > 2 && (\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        +{searchPreferences.boroughs.length - 2}\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n\n            <Button variant=\"outline\" size=\"sm\" data-testid=\"button-refine-search\">\n              Refine Search\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Main content area */}\n      <div className=\"container mx-auto px-4 py-8\">\n        <motion.div\n          initial={{ opacity: 0, y: 8 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.3 }}\n        >\n          {/* Listings Grid */}\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\" data-testid=\"container-listings\">\n            {testListings.map((listing) => (\n              <ListingCard\n                key={listing.id}\n                address={listing.address}\n                bedrooms={listing.bedrooms}\n                bathrooms={listing.bathrooms}\n                rent={listing.rent}\n                images={listing.images}\n              />\n            ))}\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3865}},"version":2}