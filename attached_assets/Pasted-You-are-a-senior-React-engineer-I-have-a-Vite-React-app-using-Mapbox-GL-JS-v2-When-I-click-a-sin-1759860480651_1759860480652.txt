You are a senior React engineer. I have a Vite + React app using Mapbox GL JS v2. When I click a single polygon in my blocks layer, all polygons become selected. Fix this by using feature-state and promoteId. Make the following exact changes.

Context:
- Vector source id: LAYER_SOURCE (e.g., "blocks")
- Source layer name: LAYER_SOURCE_LAYER (e.g., "blocks-fill")
- Each feature has a unique property "block_id" that should act as the feature id
- Fill layer id: LAYER_ID (e.g., "blocks-fill")
- Outline layer id: LAYER_LINE_ID (e.g., "blocks-outline")
- I maintain a Set of selected ids in React state

Tasks:

1) Ensure Mapbox GL v2 and CSS are installed and imported.
   - npm i mapbox-gl@2.15.0
   - In the component: 
     import mapboxgl from "mapbox-gl";
     import "mapbox-gl/dist/mapbox-gl.css";

2) When adding the vector source, add promoteId so Mapbox uses block_id as the stable feature id:
   map.addSource(LAYER_SOURCE, {
     type: "vector",
     tiles: [import.meta.env.VITE_BLOCKS_TILES],   // or omit tiles if using a style-provided source
     minzoom: 10,
     maxzoom: 16,
     promoteId: "block_id"
   });

   If the source is inside a style (no tiles array), update the existing source at runtime with:
   const s = map.getSource(LAYER_SOURCE);
   if (s && s.type === "vector" && !s.promoteId) {
     // Recreate source with promoteId if needed (or ensure the style in Studio sets promoteId = block_id)
   }
   Prefer setting promoteId = block_id in the style in Mapbox Studio if possible.

3) Change the fill paint to use feature-state rather than an array expression:
   map.addLayer({
     id: LAYER_ID,
     type: "fill",
     source: LAYER_SOURCE,
     "source-layer": LAYER_SOURCE_LAYER,
     paint: {
       "fill-color": [
         "case",
         ["boolean", ["feature-state", "selected"], false],
         "#2563eb",
         "#cbd5e1"
       ],
       "fill-opacity": 0.55
     }
   });

   Keep the outline layer as is.

4) Implement click toggle using setFeatureState:
   // React state
   const [selectedIds, setSelectedIds] = useState(new Set());

   map.on("click", LAYER_ID, (e) => {
     const f = map.queryRenderedFeatures(e.point, { layers: [LAYER_ID] })?.[0];
     if (!f) return;
     const id = f.id; // thanks to promoteId, this equals f.properties.block_id

     const key = { source: LAYER_SOURCE, sourceLayer: LAYER_SOURCE_LAYER, id };

     // Toggle local state
     setSelectedIds(prev => {
       const next = new Set(prev);
       if (next.has(id)) {
         next.delete(id);
         map.setFeatureState(key, { selected: false });
       } else {
         next.add(id);
         map.setFeatureState(key, { selected: true });
       }
       return next;
     });
   });

5) On mount, ensure any prior feature-state is cleared when the map reloads:
   map.on("load", () => {
     // no-op initially; states are applied on click
   });
   // If you need to restore selections after remount, iterate selectedIds and call setFeatureState({selected:true})

6) Update any UI that listed selected blocks to use the Set:
   const list = Array.from(selectedIds);

   For the “Remove” or “Clear All” actions:
   - For remove(id): setFeatureState({source, sourceLayer, id}, {selected:false}) and delete from the Set.
   - For clear all: iterate current ids, setFeatureState(..., {selected:false}), then empty the Set.

7) Remove the old paint expression that used:
   ["in", ["get", "block_id"], ["literal", selectedBlocks]]
   This array-based approach can behave incorrectly if selectedBlocks is not a true array of strings, if types do not match, or if state updates race. Feature-state avoids these issues and scales better.

8) Verify that the map container has an explicit height and that the env variables are correct. Confirm the source-layer string exactly matches the layer name in the tileset.

Deliverables:
- Patch my component to use promoteId = "block_id"
- Replace fill paint with the feature-state expression above
- Implement click toggle with setFeatureState
- Add clear/remove logic that also unsets feature-state
- Keep the rest of the wizard unchanged

After changes, only the clicked polygon should toggle selection. No other polygons should change unless clicked or explicitly updated through setFeatureState.